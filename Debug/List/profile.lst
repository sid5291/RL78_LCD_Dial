###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             17/Apr/2014  11:25:52 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\user_src\profile.c      #
#    Command line =  "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\user_src\profile.c"     #
#                    --core rl78_2 --code_model near --data_model near        #
#                    --near_const_location rom0 -o "D:\NCSU\Courses\ECE 561   #
#                    Embedded System Design\Project                           #
#                    3\Project3\Project3\Project3Code\Debug\Obj\"             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\rl78\LIB\dlrl78nn2n.h"    #
#                    -e -Ohs --no_crosscall --debug -lCN                      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\Debug\List\" -I         #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/applilet3_src/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/\" -I             #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/Drivers/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/user_include/\" -I      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/RTC/\"                  #
#                    --no_size_constraints                                    #
#    List file    =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\List\profile.lst  #
#    Object file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\Obj\profile.r87   #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Courses\ECE 561 Embedded System Design\Project 3\Project3\Project3\Project3Code\user_src\profile.c
      1          #include <stdint.h>
      2          #include "r_cg_timer.h"
      3          #include "region.h"
      4          #include "profile.h"
      5          #include "lcd.h"
      6          

   \                                 In  segment NEAR_Z, align 2, align-sorted
      7          volatile unsigned long profile_ticks=0;
   \                     profile_ticks:
   \   000000                       DS 4
   \   000004                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
      8          unsigned char profiling_enabled = 0;
   \                     profiling_enabled:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
      9          volatile unsigned int PC_val_low, lost=0, num_lost=0;
   \                     PC_val_low:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     lost:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
   \                     num_lost:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z
     10          

   \                                 In  segment CODE, align 1, keep-with-next
     11          void Init_Profiling(void) {
   \                     Init_Profiling:
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
     12          	unsigned i;
     13          
     14          	// Clear region counts
     15            	for (i=0; i<NumProfileRegions; i++) {
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 42....                CMPW      AX, N:NumProfileRegions  ;; 1 cycle
   \   000006 DD37                  BZ        ??Print_Results_0  ;; 4 cycles
   \   000008                       ; ------------------------------------- Block: 8 cycles
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 0
   \   000008 EB....                MOVW      DE, N:NumProfileRegions  ;; 1 cycle
   \   00000B 15                    MOVW      AX, DE             ;; 1 cycle
   \   00000C 60                    MOV       A, X               ;; 1 cycle
   \   00000D F0                    CLRB      X                  ;; 1 cycle
   \   00000E 5C03                  AND       A, #0x3            ;; 1 cycle
   \   000010 36....                MOVW      HL, #RegionCount   ;; 1 cycle
   \   000013 08                    XCH       A, X               ;; 1 cycle
   \   000014 DD0C                  BZ        ??Print_Results_1  ;; 4 cycles
   \   000016                       ; ------------------------------------- Block: 11 cycles
     16          	  	RegionCount[i]=0;
   \                     ??Init_Profiling_0:
   \   000016 F7                    CLRW      BC                 ;; 1 cycle
   \   000017 33                    XCHW      AX, BC             ;; 1 cycle
   \   000018 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000019 13                    MOVW      AX, BC             ;; 1 cycle
   \   00001A B1                    DECW      AX                 ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00001F A7                    INCW      HL                 ;; 1 cycle
   \   000020 DFF4                  BNZ       ??Init_Profiling_0  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 12 cycles
   \                     ??Print_Results_1:
   \   000022 15                    MOVW      AX, DE             ;; 1 cycle
   \   000023 312E                  SHRW      AX, 0x2            ;; 1 cycle
   \   000025 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000028 14                    MOVW      DE, AX             ;; 1 cycle
   \   000029 DD14                  BZ        ??Print_Results_0  ;; 4 cycles
   \   00002B                       ; ------------------------------------- Block: 8 cycles
   \                     ??Init_Profiling_1:
   \   00002B F6                    CLRW      AX                 ;; 1 cycle
   \   00002C BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00002D BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   00002F BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
   \   000031 BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
     17            	}
   \   000033 17                    MOVW      AX, HL             ;; 1 cycle
   \   000034 B5                    DECW      DE                 ;; 1 cycle
   \   000035 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000038 16                    MOVW      HL, AX             ;; 1 cycle
   \   000039 15                    MOVW      AX, DE             ;; 1 cycle
   \   00003A 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00003D DFEC                  BNZ       ??Init_Profiling_1  ;; 4 cycles
   \   00003F                       ; ------------------------------------- Block: 15 cycles
     18          
     19          	R_TAU0_Channel0_Start();
   \                     ??Print_Results_0:
   \   00003F FD....                CALL      R_TAU0_Channel0_Start  ;; 3 cycles
     20          }
   \   000042 C4                    POP       DE                 ;; 1 cycle
   \   000043 C2                    POP       BC                 ;; 1 cycle
   \   000044 D7                    RET                          ;; 6 cycles
   \   000045                       ; ------------------------------------- Block: 11 cycles
   \   000045                       ; ------------------------------------- Total: 65 cycles
   \   000045                       REQUIRE ?CLRL78_V1_0_L00
     21          

   \                                 In  segment CODE, align 1, keep-with-next
     22          void Disable_Profiling(void) {
   \                     Disable_Profiling:
     23            profiling_enabled = 0;
   \   000000 F5....                CLRB      N:profiling_enabled  ;; 1 cycle
     24          }
   \   000003 D7                    RET                          ;; 6 cycles
   \   000004                       ; ------------------------------------- Block: 7 cycles
   \   000004                       ; ------------------------------------- Total: 7 cycles
   \   000004                       ; * Stack frame (at entry) *
   \   000004                       ; Param size: 0
   \   000004                       ; Auto size: 0
   \   000004                       REQUIRE ?CLRL78_V1_0_L00
     25          

   \                                 In  segment CODE, align 1, keep-with-next
     26          void Enable_Profiling(void) {
   \                     Enable_Profiling:
     27            profiling_enabled = 1;
   \   000000 E5....                ONEB      N:profiling_enabled  ;; 1 cycle
     28          }
   \   000003 D7                    RET                          ;; 6 cycles
   \   000004                       ; ------------------------------------- Block: 7 cycles
   \   000004                       ; ------------------------------------- Total: 7 cycles
   \   000004                       ; * Stack frame (at entry) *
   \   000004                       ; Param size: 0
   \   000004                       ; Auto size: 0
   \   000004                       REQUIRE ?CLRL78_V1_0_L00
     29          

   \                                 In  segment CODE, align 1, keep-with-next
     30          void Clear_Lower_Screen(void) {
   \                     Clear_Lower_Screen:
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
     31          	unsigned line = 2;
   \   000003 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000006 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 2
   \   000008                       ; ------------------------------------- Block: 5 cycles
     32          
     33          	while (line <9) {
     34          		LCDPrintf(line, 0, "                 ");
   \                     ??Clear_Lower_Screen_0:
   \   000008 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00000A 34....                MOVW      DE, #`?<Constant "                 ">`  ;; 1 cycle
   \   00000D F7                    CLRW      BC                 ;; 1 cycle
   \   00000E 60                    MOV       A, X               ;; 1 cycle
   \   00000F FD....                CALL      LCDPrintf          ;; 3 cycles
     35          		line++;
   \   000012 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000014 A1                    INCW      AX                 ;; 1 cycle
     36          	}
   \   000015 440900                CMPW      AX, #0x9           ;; 1 cycle
   \   000018 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00001A DCEC                  BC        ??Clear_Lower_Screen_0  ;; 4 cycles
   \   00001C                       ; ------------------------------------- Block: 15 cycles
     37          }
   \   00001C 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   00001E C4                    POP       DE                 ;; 1 cycle
   \   00001F C2                    POP       BC                 ;; 1 cycle
   \   000020 D7                    RET                          ;; 6 cycles
   \   000021                       ; ------------------------------------- Block: 9 cycles
   \   000021                       ; ------------------------------------- Total: 29 cycles
   \   000021                       REQUIRE ?CLRL78_V1_0_L00
     38          

   \                                 In  segment CODE, align 1, keep-with-next
     39          void Print_Results(void) {
   \                     Print_Results:
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 200A                  SUBW      SP, #0xA           ;; 1 cycle
     40          	unsigned n, line=1;
     41          
     42          	LCDFont(FONT_SMALL);
   \   000004 F1                    CLRB      A                  ;; 1 cycle
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 10
   \   000005 FD....                CALL      LCDFont            ;; 3 cycles
     43          	LCDPrintf(0, 0, "%ld total ticks", profile_ticks);
   \   000008 AF....                MOVW      AX, N:profile_ticks+2  ;; 1 cycle
   \   00000B C1                    PUSH      AX                 ;; 1 cycle
   \   00000C AF....                MOVW      AX, N:profile_ticks  ;; 1 cycle
   \   00000F C1                    PUSH      AX                 ;; 1 cycle
   \   000010 34....                MOVW      DE, #`?<Constant "%ld total ticks">`  ;; 1 cycle
   \   000013 F3                    CLRB      B                  ;; 1 cycle
   \   000014 F1                    CLRB      A                  ;; 1 cycle
   \   000015 FD....                CALL      LCDPrintf          ;; 3 cycles
     44          	Clear_Lower_Screen();
   \   000018 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   00001B B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   00001D 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00001F                       ; ------------------------------------- Block: 20 cycles
   \                     ??Print_Results_2:
   \   00001F A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000021 34....                MOVW      DE, #`?<Constant "                 ">`  ;; 1 cycle
   \   000024 F7                    CLRW      BC                 ;; 1 cycle
   \   000025 60                    MOV       A, X               ;; 1 cycle
   \   000026 FD....                CALL      LCDPrintf          ;; 3 cycles
   \   000029 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002B A1                    INCW      AX                 ;; 1 cycle
   \   00002C 440900                CMPW      AX, #0x9           ;; 1 cycle
   \   00002F B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000031 DCEC                  BC        ??Print_Results_2  ;; 4 cycles
   \   000033                       ; ------------------------------------- Block: 15 cycles
     45          
     46          	line++; // don't overwrite total number of ticks
   \   000033 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000036 B800                  MOVW      [SP], AX           ;; 1 cycle
     47          	for (n=0; n<NumProfileRegions; n++) {
   \   000038 F6                    CLRW      AX                 ;; 1 cycle
   \   000039 42....                CMPW      AX, N:NumProfileRegions  ;; 1 cycle
   \   00003C DD75                  BZ        ??Print_Results_3  ;; 4 cycles
   \   00003E                       ; ------------------------------------- Block: 8 cycles
   \   00003E 30....                MOVW      AX, #RegionCount   ;; 1 cycle
   \   000041 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000043 30....                MOVW      AX, #RegionTable+4  ;; 1 cycle
   \   000046 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   000048 AF....                MOVW      AX, N:NumProfileRegions  ;; 1 cycle
   \   00004B B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   00004D                       ; ------------------------------------- Block: 6 cycles
     48          #if PROFILE_PRINT_ALL_REGIONS
     49          		LCDPrintf((n%8)+1, 0, "%d %d", n, RegionCount[n]);
     50          #else
     51          		if (RegionCount[n] > 0) {
   \                     ??Print_Results_4:
   \   00004D A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00004F 16                    MOVW      HL, AX             ;; 1 cycle
   \   000050 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000051 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000054 DD23                  BZ        ??Print_Results_5  ;; 4 cycles
   \   000056                       ; ------------------------------------- Block: 8 cycles
     52          			LCDPrintf(line, 0, "                   ");
   \   000056 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000058 34....                MOVW      DE, #`?<Constant "                   ">`  ;; 1 cycle
   \   00005B F7                    CLRW      BC                 ;; 1 cycle
   \   00005C 60                    MOV       A, X               ;; 1 cycle
   \   00005D FD....                CALL      LCDPrintf          ;; 3 cycles
     53          			LCDPrintf(line++, 0, "%d %s", RegionCount[n], RegionTable[n].Name);
   \   000060 A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   000062 C1                    PUSH      AX                 ;; 1 cycle
   \   000063 34....                MOVW      DE, #`?<Constant "%d %s">`  ;; 1 cycle
   \   000066 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   000068 16                    MOVW      HL, AX             ;; 1 cycle
   \   000069 F7                    CLRW      BC                 ;; 1 cycle
   \   00006A AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00006B C1                    PUSH      AX                 ;; 1 cycle
   \   00006C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00006E 60                    MOV       A, X               ;; 1 cycle
   \   00006F FD....                CALL      LCDPrintf          ;; 3 cycles
   \   000072 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000074 A1                    INCW      AX                 ;; 1 cycle
   \   000075 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   000077 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000079                       ; ------------------------------------- Block: 24 cycles
     54          		}
     55          #endif
     56          		if (line == 9) {
   \                     ??Print_Results_5:
   \   000079 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00007B 440900                CMPW      AX, #0x9           ;; 1 cycle
   \   00007E DF1B                  BNZ       ??Print_Results_6  ;; 4 cycles
   \   000080                       ; ------------------------------------- Block: 6 cycles
     57          			line = 2;
   \   000080 300200                MOVW      AX, #0x2           ;; 1 cycle
   \   000083 B800                  MOVW      [SP], AX           ;; 1 cycle
     58          			Clear_Lower_Screen();
   \   000085 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000087                       ; ------------------------------------- Block: 3 cycles
   \                     ??Print_Results_7:
   \   000087 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000089 34....                MOVW      DE, #`?<Constant "                 ">`  ;; 1 cycle
   \   00008C F7                    CLRW      BC                 ;; 1 cycle
   \   00008D 60                    MOV       A, X               ;; 1 cycle
   \   00008E FD....                CALL      LCDPrintf          ;; 3 cycles
   \   000091 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000093 A1                    INCW      AX                 ;; 1 cycle
   \   000094 440900                CMPW      AX, #0x9           ;; 1 cycle
   \   000097 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000099 DCEC                  BC        ??Print_Results_7  ;; 4 cycles
   \   00009B                       ; ------------------------------------- Block: 15 cycles
     59          		}
     60          	}
   \                     ??Print_Results_6:
   \   00009B A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00009D 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   0000A0 B808                  MOVW      [SP+0x08], AX      ;; 1 cycle
   \   0000A2 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   0000A4 040200                ADDW      AX, #0x2           ;; 1 cycle
   \   0000A7 B804                  MOVW      [SP+0x04], AX      ;; 1 cycle
   \   0000A9 A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0000AB B1                    DECW      AX                 ;; 1 cycle
   \   0000AC 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   0000AF B806                  MOVW      [SP+0x06], AX      ;; 1 cycle
   \   0000B1 DF9A                  BNZ       ??Print_Results_4  ;; 4 cycles
   \   0000B3                       ; ------------------------------------- Block: 14 cycles
     61          }
   \                     ??Print_Results_3:
   \   0000B3 100A                  ADDW      SP, #0xA           ;; 1 cycle
   \   0000B5 C4                    POP       DE                 ;; 1 cycle
   \   0000B6 C2                    POP       BC                 ;; 1 cycle
   \   0000B7 D7                    RET                          ;; 6 cycles
   \   0000B8                       ; ------------------------------------- Block: 9 cycles
   \   0000B8                       ; ------------------------------------- Total: 128 cycles
   \   0000B8                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "                 ">`:
   \   000000 202020202020          DB "                 "

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%ld total ticks">`:
   \   000000 256C6420746F          DB "%ld total ticks"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "                   ">`:
   \   000000 202020202020          DB "                   "

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "%d %s">`:
   \   000000 256420257300          DB "%d %s"

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Clear_Lower_Screen
        6   -> LCDPrintf
      0   Disable_Profiling
      0   Enable_Profiling
      4   Init_Profiling
        4   -> R_TAU0_Channel0_Start
     18   Print_Results
       14   -> LCDFont
       14   -> LCDPrintf
       18   -> LCDPrintf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "                   ">
      18  ?<Constant "                 ">
       6  ?<Constant "%d %s">
      16  ?<Constant "%ld total ticks">
      33  Clear_Lower_Screen
       4  Disable_Profiling
       4  Enable_Profiling
      69  Init_Profiling
       2  PC_val_low
     184  Print_Results
       2  lost
       2  num_lost
       4  profile_ticks
       1  profiling_enabled

 
 294 bytes in segment CODE
  60 bytes in segment NEAR_CONST
  11 bytes in segment NEAR_Z
 
 294 bytes of CODE  memory
  60 bytes of CONST memory
  11 bytes of DATA  memory

Errors: none
Warnings: none
