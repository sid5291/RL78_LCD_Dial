###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             17/Apr/2014  11:25:53 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\applilet3_src\r_main.c  #
#    Command line =  "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\applilet3_src\r_main.c" #
#                     --core rl78_2 --code_model near --data_model near       #
#                    --near_const_location rom0 -o "D:\NCSU\Courses\ECE 561   #
#                    Embedded System Design\Project                           #
#                    3\Project3\Project3\Project3Code\Debug\Obj\"             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\rl78\LIB\dlrl78nn2n.h"    #
#                    -e -Ohs --no_crosscall --debug -lCN                      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\Debug\List\" -I         #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/applilet3_src/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/\" -I             #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/Drivers/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/user_include/\" -I      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/RTC/\"                  #
#                    --no_size_constraints                                    #
#    List file    =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\List\r_main.lst   #
#    Object file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\Obj\r_main.r87    #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Courses\ECE 561 Embedded System Design\Project 3\Project3\Project3\Project3Code\applilet3_src\r_main.c
      1          /***********************************************************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only 
      4          * intended for use with Renesas products. No other uses are authorized. This 
      5          * software is owned by Renesas Electronics Corporation and is protected under 
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING 
      8          * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT 
      9          * LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
     10          * AND NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.
     11          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS 
     12          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
     13          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR 
     14          * ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE 
     15          * BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     16          * Renesas reserves the right, without notice, to make changes to this software 
     17          * and to discontinue the availability of this software.  By using this software, 
     18          * you agree to the additional terms and conditions found by accessing the 
     19          * following link:
     20          * http://www.renesas.com/disclaimer
     21          *
     22          * Copyright (C) 2011, 2013 Renesas Electronics Corporation. All rights reserved.
     23          ***********************************************************************************************************************/
     24          
     25          /***********************************************************************************************************************
     26          * File Name    : r_main.c
     27          * Version      : Applilet3 for RL78/G14 V2.00.00.08 [12 Apr 2013]
     28          * Device(s)    : R5F104PJ
     29          * Tool-Chain   : IAR Systems iccrl78
     30          * Description  : This file implements main function.
     31          * Creation Date: 4/16/2014
     32          ***********************************************************************************************************************/
     33          
     34          /***********************************************************************************************************************
     35          Includes
     36          ***********************************************************************************************************************/
     37          #include "r_cg_macrodriver.h"
     38          #include "r_cg_cgc.h"
     39          #include "r_cg_port.h"
     40          #include "r_cg_serial.h"
     41          #include "r_cg_adc.h"
     42          #include "r_cg_timer.h"
     43          #include "r_cg_it.h"
     44          /* Start user code for include. Do not edit comment generated here */
     45          #include "lcd.h"
     46          #include "RDKRL78_spi.h"
     47          #include "tasks.h"
     48          #include "rtc_sched.h"
     49          #include "profile.h"
     50          #include "region.h"
     51          /* End user code. Do not edit comment generated here */
     52          #include "r_cg_userdefine.h"
     53          
     54          /***********************************************************************************************************************
     55          Global variables and functions
     56          ***********************************************************************************************************************/
     57          /* Start user code for global. Do not edit comment generated here */
     58          extern void FBG_Test(void);
     59          extern void LCDDrawLine(PointT*, PointT*, uint8_t);
     60          extern void LCDDrawDialBackground(void);
     61          extern void TestMyCode(void);
     62          /* End user code. Do not edit comment generated here */
     63          
     64          /* Set option bytes */
     65          #pragma location = "OPTBYTE"

   \                                 In  segment OPTBYTE, align 1, root
     66          __root const uint8_t opbyte0 = 0xEFU;
   \                     opbyte0:
   \   000000 EF                    DB 239
     67          #pragma location = "OPTBYTE"

   \                                 In  segment OPTBYTE, align 1, root
     68          __root const uint8_t opbyte1 = 0xFFU;
   \                     opbyte1:
   \   000000 FF                    DB 255
     69          #pragma location = "OPTBYTE"

   \                                 In  segment OPTBYTE, align 1, root
     70          __root const uint8_t opbyte2 = 0xF8U;
   \                     opbyte2:
   \   000000 F8                    DB 248
     71          #pragma location = "OPTBYTE"

   \                                 In  segment OPTBYTE, align 1, root
     72          __root const uint8_t opbyte3 = 0x85U;
   \                     opbyte3:
   \   000000 85                    DB 133
     73          
     74          /* Set security ID */
     75          #pragma location = "SECUID"

   \                                 In  segment SECUID, align 2, root
     76          __root const uint8_t secuid[10] = 
   \                     secuid:
   \   000000 000000000000          DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     77              {0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U};
     78          /* Secure trace RAM area */

   \                                 In  segment NEAR_A, at 0xfa300, root
     79          __no_init __root unsigned char ocdtraceram[1024] @ 0xFA300;
   \                     ocdtraceram:
   \   000000                       DS 1024
     80          
     81          void R_MAIN_UserInit(void);
     82          
     83          /***********************************************************************************************************************
     84          * Function Name: main
     85          * Description  : This function implements main function.
     86          * Arguments    : None
     87          * Return Value : None
     88          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     89          void main(void)
   \                     main:
     90          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 2004                  SUBW      SP, #0x4           ;; 1 cycle
     91              R_MAIN_UserInit();
   \   000003 717AFA                EI                           ;; 2 cycles
     92              /* Start user code. Do not edit comment generated here */
     93          
     94              R_IT_Start(); 				/* Start interval timer (for RTC_Scheduler) */
   \   000006                       ; * Stack frame (at entry) *
   \   000006                       ; Param size: 0
   \   000006                       ; Auto size: 4
   \   000006 FD....                CALL      R_IT_Start         ;; 3 cycles
     95              SPI_Init();               	/* LCD SPI initialization */
   \   000009 FD....                CALL      SPI_Init           ;; 3 cycles
     96              LCDInit();              	/* LCD controller initialization*/
   \   00000C FD....                CALL      LCDInit            ;; 3 cycles
     97          
     98              LCDFont(FONT_LARGE);
   \   00000F E1                    ONEB      A                  ;; 1 cycle
   \   000010 FD....                CALL      LCDFont            ;; 3 cycles
     99              LCDString("Project 3", 0, 0);
   \   000013 F7                    CLRW      BC                 ;; 1 cycle
   \   000014 30....                MOVW      AX, #`?<Constant "Project 3">`  ;; 1 cycle
   \   000017 FD....                CALL      LCDString          ;; 3 cycles
    100              LCDString("skumar15", 0, 8);
   \   00001A 5208                  MOV       C, #0x8            ;; 1 cycle
   \   00001C F3                    CLRB      B                  ;; 1 cycle
   \   00001D 30....                MOVW      AX, #`?<Constant "skumar15">`  ;; 1 cycle
   \   000020 FD....                CALL      LCDString          ;; 3 cycles
    101          
    102          	for (volatile uint32_t n=0; n<3000000; n++)
   \   000023 F6                    CLRW      AX                 ;; 1 cycle
   \   000024 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000026 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000028 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00002A 12                    MOVW      BC, AX             ;; 1 cycle
   \   00002B A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002D 33                    XCHW      AX, BC             ;; 1 cycle
   \   00002E 442D00                CMPW      AX, #0x2D          ;; 1 cycle
   \   000031 13                    MOVW      AX, BC             ;; 1 cycle
   \   000032 61F8                  SKNZ                         ;; 4 cycles
   \   000034                       ; ------------------------------------- Block: 41 cycles
   \   000034 44C0C6                CMPW      AX, #0xC6C0        ;; 1 cycle
   \   000037                       ; ------------------------------------- Block: 1 cycles
   \                     ??main_0:
   \   000037 DE63                  BNC       ??R_MAIN_UserInit_0  ;; 4 cycles
   \   000039                       ; ------------------------------------- Block: 4 cycles
   \                     ??main_1:
   \   000039 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00003B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00003C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00003E 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000041 61D8                  SKNC
   \   000043 A3                    INCW      BC                 ;; 5 cycles
   \   000044 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000046 13                    MOVW      AX, BC             ;; 1 cycle
   \   000047 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000049 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004B 12                    MOVW      BC, AX             ;; 1 cycle
   \   00004C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00004E 33                    XCHW      AX, BC             ;; 1 cycle
   \   00004F 442D00                CMPW      AX, #0x2D          ;; 1 cycle
   \   000052 13                    MOVW      AX, BC             ;; 1 cycle
   \   000053 61F8                  SKNZ                         ;; 4 cycles
   \   000055                       ; ------------------------------------- Block: 22 cycles
   \   000055 44C0C6                CMPW      AX, #0xC6C0        ;; 1 cycle
   \   000058                       ; ------------------------------------- Block: 1 cycles
   \                     ??main_2:
   \   000058 DE42                  BNC       ??R_MAIN_UserInit_0  ;; 4 cycles
   \   00005A                       ; ------------------------------------- Block: 4 cycles
   \   00005A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005C 12                    MOVW      BC, AX             ;; 1 cycle
   \   00005D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00005F 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000062 61D8                  SKNC
   \   000064 A3                    INCW      BC                 ;; 5 cycles
   \   000065 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000067 13                    MOVW      AX, BC             ;; 1 cycle
   \   000068 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00006A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00006C 12                    MOVW      BC, AX             ;; 1 cycle
   \   00006D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00006F 33                    XCHW      AX, BC             ;; 1 cycle
   \   000070 442D00                CMPW      AX, #0x2D          ;; 1 cycle
   \   000073 13                    MOVW      AX, BC             ;; 1 cycle
   \   000074 61F8                  SKNZ                         ;; 4 cycles
   \   000076                       ; ------------------------------------- Block: 22 cycles
   \   000076 44C0C6                CMPW      AX, #0xC6C0        ;; 1 cycle
   \   000079                       ; ------------------------------------- Block: 1 cycles
   \                     ??main_3:
   \   000079 DE21                  BNC       ??R_MAIN_UserInit_0  ;; 4 cycles
   \   00007B                       ; ------------------------------------- Block: 4 cycles
   \   00007B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00007D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00007E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000080 040100                ADDW      AX, #0x1           ;; 1 cycle
   \   000083 61D8                  SKNC
   \   000085 A3                    INCW      BC                 ;; 5 cycles
   \   000086 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000088 13                    MOVW      AX, BC             ;; 1 cycle
   \   000089 B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00008B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00008D 12                    MOVW      BC, AX             ;; 1 cycle
   \   00008E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000090 33                    XCHW      AX, BC             ;; 1 cycle
   \   000091 442D00                CMPW      AX, #0x2D          ;; 1 cycle
   \   000094 13                    MOVW      AX, BC             ;; 1 cycle
   \   000095 61F8                  SKNZ                         ;; 4 cycles
   \   000097                       ; ------------------------------------- Block: 22 cycles
   \   000097 44C0C6                CMPW      AX, #0xC6C0        ;; 1 cycle
   \   00009A                       ; ------------------------------------- Block: 1 cycles
   \                     ??main_4:
   \   00009A DC9D                  BC        ??main_1           ;; 4 cycles
   \   00009C                       ; ------------------------------------- Block: 4 cycles
    103          		;
    104                LCDClearScreen();
   \                     ??R_MAIN_UserInit_0:
   \   00009C FD....                CALL      LCDClearScreen     ;; 3 cycles
    105          
    106                 //FBG_Test();
    107                 //LCDDrawLine(&a,&b,1);
    108                 //LCDDrawLine(&b,&a,1);
    109                 //LCDDrawDialBackground();
    110             
    111          
    112          	Init_Profiling();
   \   00009F FD....                CALL      Init_Profiling     ;; 3 cycles
    113            	Enable_Profiling();
   \   0000A2 FD....                CALL      Enable_Profiling   ;; 3 cycles
    114          	TestMyCode();           // Put your code to profile here
   \   0000A5 FD....                CALL      TestMyCode         ;; 3 cycles
    115          	Disable_Profiling();
   \   0000A8 FD....                CALL      Disable_Profiling  ;; 3 cycles
    116          
    117          	Print_Results();
   \   0000AB FD....                CALL      Print_Results      ;; 3 cycles
   \   0000AE                       ; ------------------------------------- Block: 18 cycles
    118          
    119          	while (1);
   \                     ??main_5:
   \   0000AE EFFE                  BR        S:??main_5         ;; 3 cycles
   \   0000B0                       ; ------------------------------------- Block: 3 cycles
   \   0000B0                       ; ------------------------------------- Total: 148 cycles
   \   0000B0                       REQUIRE ?CLRL78_V1_0_L00
    120          
    121              /* End user code. Do not edit comment generated here */
    122          }
    123          
    124          
    125          /***********************************************************************************************************************
    126          * Function Name: R_MAIN_UserInit
    127          * Description  : This function adds user code before implementing main function.
    128          * Arguments    : None
    129          * Return Value : None
    130          ***********************************************************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    131          void R_MAIN_UserInit(void)
   \                     R_MAIN_UserInit:
    132          {
    133              /* Start user code. Do not edit comment generated here */
    134              EI();
   \   000000 717AFA                EI                           ;; 2 cycles
    135              /* End user code. Do not edit comment generated here */
    136          }
   \   000003 D7                    RET                          ;; 6 cycles
   \   000004                       ; ------------------------------------- Block: 8 cycles
   \   000004                       ; ------------------------------------- Total: 8 cycles
   \   000004                       ; * Stack frame (at entry) *
   \   000004                       ; Param size: 0
   \   000004                       ; Auto size: 0
   \   000004                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "Project 3">`:
   \   000000 50726F6A6563          DB "Project 3"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "skumar15">`:
   \   000000 736B756D6172          DB "skumar15"
   \   000009 00                    DB 0
    137          
    138          /* Start user code for adding. Do not edit comment generated here */
    139          /* End user code. Do not edit comment generated here */

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      0   R_MAIN_UserInit
      6   main
        6   -> Disable_Profiling
        6   -> Enable_Profiling
        6   -> Init_Profiling
        6   -> LCDClearScreen
        6   -> LCDFont
        6   -> LCDInit
        6   -> LCDString
        6   -> Print_Results
        6   -> R_IT_Start
        6   -> SPI_Init
        6   -> TestMyCode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "Project 3">
      10  ?<Constant "skumar15">
       4  R_MAIN_UserInit
     176  main
    1024  ocdtraceram
       1  opbyte0
       1  opbyte1
       1  opbyte2
       1  opbyte3
      10  secuid

 
   180 bytes in segment CODE
 1 024 bytes in segment NEAR_A
    20 bytes in segment NEAR_CONST
     4 bytes in segment OPTBYTE
    10 bytes in segment SECUID
 
 180 bytes of CODE  memory
  34 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 024 bytes shared)

Errors: none
Warnings: none
