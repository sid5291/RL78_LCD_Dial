###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             17/Apr/2014  11:25:47 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Glyph\glyph.c           #
#    Command line =  "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\Glyph\glyph.c" --core   #
#                    rl78_2 --code_model near --data_model near               #
#                    --near_const_location rom0 -o "D:\NCSU\Courses\ECE 561   #
#                    Embedded System Design\Project                           #
#                    3\Project3\Project3\Project3Code\Debug\Obj\"             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\rl78\LIB\dlrl78nn2n.h"    #
#                    -e -Ohs --no_crosscall --debug -lCN                      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\Debug\List\" -I         #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/applilet3_src/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/\" -I             #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/Drivers/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/user_include/\" -I      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/RTC/\"                  #
#                    --no_size_constraints                                    #
#    List file    =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\List\glyph.lst    #
#    Object file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\Obj\glyph.r87     #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Courses\ECE 561 Embedded System Design\Project 3\Project3\Project3\Project3Code\Glyph\glyph.c
      1          /******************************************************************************
      2          * DISCLAIMER
      3          * This software is supplied by Renesas Electronics Corporation and is only
      4          * intended for use with Renesas products. No other uses are authorized.
      5          * This software is owned by Renesas Electronics Corporation and is protected under
      6          * all applicable laws, including copyright laws.
      7          * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES
      8          * REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY,
      9          * INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
     10          * PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY
     11          * DISCLAIMED.
     12          * TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS
     13          * ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE
     14          * FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
     15          * FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR ITS
     16          * AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
     17          * Renesas reserves the right, without notice, to make changes to this
     18          * software and to discontinue the availability of this software.
     19          * By using this software, you agree to the additional terms and
     20          * conditions found by accessing the following link:
     21          * http://www.renesas.com/disclaimer
     22          ******************************************************************************/
     23          /* Copyright (C) 2010 Renesas Electronics Corporation. All rights reserved. */
     24          /* Code written for Renesas by Future Designs, Inc. www.teamfdi.com */
     25          
     26          /******************************************************************************
     27          * File Name : Glyph.c
     28          * Version : 1.00
     29          * Device(s) : Generic
     30          * Tool-Chain : Glyph - The Generic API for Graphics LCD.
     31          * H/W Platform : Embedded Controls
     32          * Description : This is the Glyph API Library definitions.
     33          *               The Generic API for Graphics LCD (nicknamed "Glyph") is a 
     34          *               reusable software design to support multiple projects where 
     35          *               the LCD size and resolution may change, but the basic feature 
     36          *               set will stay consistent.  Glyph is a standard library 
     37          *               interface for use with any graphic LCD.  
     38          ******************************************************************************
     39          * History :
     40          * : 20.07.2010 1.00 First Release
     41          ******************************************************************************/
     42          
     43          /******************************************************************************
     44          Includes “Glyph Includes”
     45          ******************************************************************************/
     46          #include <stdio.h>
     47          #include <stdlib.h>
     48          #include "glyph_cfg.h"
     49          #include "glyph_api.h"
     50          
     51          /******************************************************************************
     52          Private Prototypes for the Glyph LCD API
     53          ******************************************************************************/
     54          T_glyphError GlyphLCDOpen(T_glyphHandle aHandle, int16_t aAddress) ;
     55          T_glyphError GlyphCommOpen(T_glyphHandle aHandle, int16_t aAddress) ;
     56          
     57          /******************************************************************************
     58          * ID : 1.0
     59          * Outline : GlyphOpen
     60          * Include : Glyph.h
     61          * Function Name: GlyphOpen
     62          * Description : Open the Glyph API.
     63          * Argument : aHandle - handle passed in and initialized.
     64          *          : aAddress - The numerical definition of the communications
     65          *                       and LCD Display set used for this instance of
     66          *                       the passed in handle.
     67          * Return Value : 0=success, not 0= error
     68          * Calling Functions : main
     69          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     70          T_glyphError GlyphOpen(T_glyphHandle *aHandle, int16_t aAddress)
   \                     GlyphOpen:
     71          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C1                    PUSH      AX                 ;; 1 cycle
     72              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
   \   000004 5501                  MOV       D, #0x1            ;; 1 cycle
     73              //T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
     74              T_glyphWorkspace *p_glyph ;
     75          
     76              p_glyph = (T_glyphWorkspace *)malloc(sizeof(T_glyphWorkspace)) ;
   \   000006 300400                MOVW      AX, #0x4           ;; 1 cycle
   \   000009                       ; * Stack frame (at entry) *
   \   000009                       ; Param size: 0
   \   000009                       ; Auto size: 6
   \   000009 FD....                CALL      __near_malloc      ;; 3 cycles
   \   00000C B800                  MOVW      [SP], AX           ;; 1 cycle
     77              p_glyph->iCommAPI = (T_Comm_API *)malloc(sizeof(T_Comm_API)) ;
   \   00000E 300600                MOVW      AX, #0x6           ;; 1 cycle
   \   000011 FD....                CALL      __near_malloc      ;; 3 cycles
   \   000014 12                    MOVW      BC, AX             ;; 1 cycle
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 16                    MOVW      HL, AX             ;; 1 cycle
   \   000018 13                    MOVW      AX, BC             ;; 1 cycle
   \   000019 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
     78              p_glyph->iLCDAPI = (T_LCD_API *)malloc(sizeof(T_LCD_API)) ;
   \   00001B 302400                MOVW      AX, #0x24          ;; 1 cycle
   \   00001E FD....                CALL      __near_malloc      ;; 3 cycles
   \   000021 12                    MOVW      BC, AX             ;; 1 cycle
   \   000022 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000024 16                    MOVW      HL, AX             ;; 1 cycle
   \   000025 33                    XCHW      AX, BC             ;; 1 cycle
   \   000026 BB                    MOVW      [HL], AX           ;; 1 cycle
     79              
     80              *aHandle = (T_glyphHandle)p_glyph ;
   \   000027 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000029 16                    MOVW      HL, AX             ;; 1 cycle
   \   00002A 13                    MOVW      AX, BC             ;; 1 cycle
   \   00002B BB                    MOVW      [HL], AX           ;; 1 cycle
     81              
     82              /* Open the communications and the LCD */
     83              if (GlyphCommOpen(*aHandle, aAddress) == GLYPH_ERROR_NONE) {
   \   00002C A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00002E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00002F AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000030 FD....                CALL      GlyphCommOpen      ;; 3 cycles
   \   000033 D1                    CMP0      A                  ;; 1 cycle
   \   000034 DF26                  BNZ       ??GlyphSetContrastBoost_0  ;; 4 cycles
   \   000036                       ; ------------------------------------- Block: 43 cycles
     84                  if (GlyphLCDOpen(*aHandle, aAddress) == GLYPH_ERROR_NONE) {
   \   000036 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000038 12                    MOVW      BC, AX             ;; 1 cycle
   \   000039 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00003B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00003C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00003D FD....                CALL      GlyphLCDOpen       ;; 3 cycles
   \   000040 D1                    CMP0      A                  ;; 1 cycle
   \   000041 DF19                  BNZ       ??GlyphSetContrastBoost_0  ;; 4 cycles
   \   000043                       ; ------------------------------------- Block: 13 cycles
     85                      error = p_glyph->iLCDAPI->iOpen(*aHandle, aAddress) ;
   \   000043 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000045 12                    MOVW      BC, AX             ;; 1 cycle
   \   000046 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000048 16                    MOVW      HL, AX             ;; 1 cycle
   \   000049 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00004C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00004D C3                    PUSH      BC                 ;; 1 cycle
   \   00004E 12                    MOVW      BC, AX             ;; 1 cycle
   \   00004F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000051 16                    MOVW      HL, AX             ;; 1 cycle
   \   000052 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000053 14                    MOVW      DE, AX             ;; 1 cycle
   \   000054 AA1C                  MOVW      AX, [DE+0x1C]      ;; 1 cycle
   \   000056 16                    MOVW      HL, AX             ;; 1 cycle
   \   000057 13                    MOVW      AX, BC             ;; 1 cycle
   \   000058 C2                    POP       BC                 ;; 1 cycle
   \   000059 61FA                  CALL      HL                 ;; 3 cycles
   \   00005B 75                    MOV       D, A               ;; 1 cycle
   \   00005C                       ; ------------------------------------- Block: 20 cycles
     86                  }
     87              }
     88              
     89              return error ;
   \                     ??GlyphSetContrastBoost_0:
   \   00005C 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   00005E 65                    MOV       A, D               ;; 1 cycle
   \   00005F C4                    POP       DE                 ;; 1 cycle
   \   000060 D7                    RET                          ;; 6 cycles
   \   000061                       ; ------------------------------------- Block: 9 cycles
   \   000061                       ; ------------------------------------- Total: 85 cycles
   \   000061                       REQUIRE ?CLRL78_V1_0_L00
     90          }
     91          
     92          /******************************************************************************
     93          * ID : 1.1
     94          * Outline : GlyphClose
     95          * Include : Glyph.h
     96          * Function Name: GlyphClose
     97          * Description : Close the Glyph API.
     98          * Argument : aHandle - handle created and returned.
     99          * Return Value : 0=success, not 0= error
    100          * Calling Functions : main
    101          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    102          T_glyphError GlyphClose(T_glyphHandle *aHandle)
   \                     GlyphClose:
    103          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C1                    PUSH      AX                 ;; 1 cycle
    104              T_glyphError error = GLYPH_ERROR_ILLEGAL_OPERATION ;
    105              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)*aHandle;
   \   000003 16                    MOVW      HL, AX             ;; 1 cycle
   \   000004 C1                    PUSH      AX                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 B800                  MOVW      [SP], AX           ;; 1 cycle
    106              
    107              GlyphClearScreen(*aHandle) ;
   \   000008 16                    MOVW      HL, AX             ;; 1 cycle
   \   000009 E6                    ONEW      AX                 ;; 1 cycle
   \   00000A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000B C5                    PUSH      DE                 ;; 1 cycle
   \   00000C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00000D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000E 320500                MOVW      BC, #0x5           ;; 1 cycle
   \   000011 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000013 37                    XCHW      AX, HL             ;; 1 cycle
   \   000014 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000017 C4                    POP       DE                 ;; 1 cycle
   \   000018                       ; * Stack frame (at entry) *
   \   000018                       ; Param size: 0
   \   000018                       ; Auto size: 4
   \   000018 61FA                  CALL      HL                 ;; 3 cycles
    108          
    109              error = p_glyph->iLCDAPI->iClose(aHandle);
   \   00001A A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00001F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000020 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000023 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000024 14                    MOVW      DE, AX             ;; 1 cycle
   \   000025 AA1E                  MOVW      AX, [DE+0x1E]      ;; 1 cycle
   \   000027 12                    MOVW      BC, AX             ;; 1 cycle
   \   000028 17                    MOVW      AX, HL             ;; 1 cycle
   \   000029 61DA                  CALL      BC                 ;; 3 cycles
   \   00002B 73                    MOV       B, A               ;; 1 cycle
    110              if (error == GLYPH_ERROR_NONE) {
   \   00002C D3                    CMP0      B                  ;; 1 cycle
   \   00002D DF1E                  BNZ       ??GlyphSetContrastBoost_1  ;; 4 cycles
   \   00002F                       ; ------------------------------------- Block: 40 cycles
    111                  free((void *)p_glyph->iLCDAPI) ;
   \   00002F A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000031 16                    MOVW      HL, AX             ;; 1 cycle
   \   000032 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000033 FD....                CALL      __near_free        ;; 3 cycles
    112                  p_glyph->iLCDAPI = 0 ;
   \   000036 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000038 16                    MOVW      HL, AX             ;; 1 cycle
   \   000039 F6                    CLRW      AX                 ;; 1 cycle
   \   00003A BB                    MOVW      [HL], AX           ;; 1 cycle
    113                  free((void *)p_glyph->iCommAPI) ;
   \   00003B AC02                  MOVW      AX, [HL+0x02]      ;; 1 cycle
   \   00003D FD....                CALL      __near_free        ;; 3 cycles
    114                  p_glyph->iCommAPI = 0 ;
   \   000040 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000042 16                    MOVW      HL, AX             ;; 1 cycle
   \   000043 F6                    CLRW      AX                 ;; 1 cycle
   \   000044 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    115                  free((void *)p_glyph) ;
   \   000046 17                    MOVW      AX, HL             ;; 1 cycle
   \   000047 FD....                CALL      __near_free        ;; 3 cycles
    116                  p_glyph = 0 ;
   \   00004A F6                    CLRW      AX                 ;; 1 cycle
   \   00004B B800                  MOVW      [SP], AX           ;; 1 cycle
   \   00004D                       ; ------------------------------------- Block: 24 cycles
    117              }
    118              
    119              *aHandle = (T_glyphHandle)p_glyph ;
   \                     ??GlyphSetContrastBoost_1:
   \   00004D A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00004F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000050 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000052 16                    MOVW      HL, AX             ;; 1 cycle
   \   000053 15                    MOVW      AX, DE             ;; 1 cycle
    120              
    121              return error ;
   \   000054 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000056 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000057 C4                    POP       DE                 ;; 1 cycle
   \   000058 63                    MOV       A, B               ;; 1 cycle
   \   000059 C2                    POP       BC                 ;; 1 cycle
   \   00005A D7                    RET                          ;; 6 cycles
   \   00005B                       ; ------------------------------------- Block: 16 cycles
   \   00005B                       ; ------------------------------------- Total: 80 cycles
   \   00005B                       REQUIRE ?CLRL78_V1_0_L00
    122          }
    123          
    124          /******************************************************************************
    125          * ID : 2.0
    126          * Outline : GlyphWrite
    127          * Include : Glyph.h
    128          * Function Name: GlyphWrite
    129          * Description : Write to the LCD using a Glyph Register value, to the Glyph
    130          * data storage or run an LCD Glyph Command.
    131          * Argument : aHandle - handle created and returned.
    132          *          : aAddress - may be used for communications.
    133          * Return Value : 0=success, not 0= error
    134          * Calling Functions : main, GlyphSetX, GlyphSetY, GlyphSetXY,
    135          *                     GlyphSetFont, GlyphSetDrawMode,
    136          *                     GlyphChar, GlyphString, GlyphClearScreen,
    137          *                     GlyphInvertScreen, GlyphNormalScreen, GlyphSleep,
    138          *                     GlyphWake, GlyphDrawTestPattern, GlyphDrawBlock,
    139          *                     GlyphEraseBlock, GlyphSetContrast, GlyphSetContrastBoost
    140          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    141          T_glyphError GlyphWrite(T_glyphHandle aHandle, uint16_t aRegister, uint16_t aValue)
   \                     GlyphWrite:
    142          {
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    143              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    144          
    145              return p_glyph->iLCDAPI->iWrite(aHandle, aRegister, aValue);
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
   \   000004 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000007 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000009                       ; ------------------------------------- Block: 6 cycles
   \   000009                       ; ------------------------------------- Total: 6 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
   \   000009                       REQUIRE ?Subroutine2
   \   000009                       ; // Fall through to label ?Subroutine2
    146          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 C4                    POP       DE                 ;; 1 cycle
   \   000002                       ; * Stack frame (at entry) *
   \   000002                       ; Param size: 0
   \   000002                       ; Auto size: 0
   \   000002                       ; * Stack frame (at entry) *
   \   000002                       ; Param size: 0
   \   000002                       ; Auto size: 0
   \   000002 61FA                  CALL      HL                 ;; 3 cycles
   \   000004 D7                    RET                          ;; 6 cycles
   \   000005                       ; ------------------------------------- Block: 11 cycles
   \   000005                       ; ------------------------------------- Total: 11 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
    147          
    148          /******************************************************************************
    149          * ID : 3.0
    150          * Outline : GlyphRead
    151          * Include : Glyph.h
    152          * Function Name: GlyphRead
    153          * Description : Read from the Glyph data storage using a Glyph Register value.
    154          * Argument : aHandle - handle created and returned.
    155          *          : aAddress - may be used for communications.
    156          * Return Value : 0=success, not 0= error
    157          * Calling Functions : main, GlyphGetStatus, GlyphGetX, GlyphGetY, GlyphGetXY,
    158          *                     GlyphGetFont, GlyphGetFont
    159          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    160          T_glyphError GlyphRead(T_glyphHandle aHandle, uint16_t aRegister, uint16_t *aValue)
   \                     GlyphRead:
    161          {
   \   000000 16                    MOVW      HL, AX             ;; 1 cycle
    162              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    163          
    164              return p_glyph->iLCDAPI->iRead(aHandle, aRegister, aValue) ;
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000003 14                    MOVW      DE, AX             ;; 1 cycle
   \   000004 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000007 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   000009 ED....                BR        N:?Subroutine2     ;; 3 cycles
   \   00000C                       ; ------------------------------------- Block: 9 cycles
   \   00000C                       ; ------------------------------------- Total: 9 cycles
   \   00000C                       REQUIRE ?CLRL78_V1_0_L00
    165          }
    166          
    167          /******************************************************************************
    168          * ID : 3.1
    169          * Outline : GlyphGetStatus
    170          * Include : Glyph.h
    171          * Function Name: GlyphGetStatus
    172          * Description : Returns the status.
    173          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    174          *          : aStatus - GLYPH_STATUS_BUSY or GLYPH_STATUS_READY
    175          * Return Value : 0=success, not 0= error
    176          * Calling Functions : main
    177          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    178          T_glyphError GlyphGetStatus(T_glyphHandle aHandle, T_glyphStatusBits *aStatus)
   \                     GlyphGetStatus:
    179          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    180              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    181          
    182              return p_glyph->iLCDAPI->iRead(aHandle, GLYPH_STATUS, (uint16_t *)aStatus) ;
   \   000004 C5                    PUSH      DE                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 F7                    CLRW      BC                 ;; 1 cycle
   \   000008 ED....                BR        N:?Subroutine1     ;; 3 cycles
   \   00000B                       ; ------------------------------------- Block: 11 cycles
   \   00000B                       ; ------------------------------------- Total: 11 cycles
   \   00000B                       REQUIRE ?CLRL78_V1_0_L00
    183          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   000002                       ; ------------------------------------- Block: 1 cycles
   \   000002                       ; ------------------------------------- Total: 1 cycles
   \   000002                       REQUIRE ?CLRL78_V1_0_L00
   \   000002                       REQUIRE ??Subroutine5_0
   \   000002                       ; // Fall through to label ??Subroutine5_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000 37                    XCHW      AX, HL             ;; 1 cycle
   \   000001 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000004 C4                    POP       DE                 ;; 1 cycle
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 0
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 0
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 0
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 0
   \   000005                       ; * Stack frame (at entry) *
   \   000005                       ; Param size: 0
   \   000005                       ; Auto size: 0
   \   000005 61FA                  CALL      HL                 ;; 3 cycles
   \   000007 C4                    POP       DE                 ;; 1 cycle
   \   000008 D7                    RET                          ;; 6 cycles
   \   000009                       ; ------------------------------------- Block: 13 cycles
   \   000009                       ; ------------------------------------- Total: 13 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    184          
    185          /******************************************************************************
    186          * ID : 4.0
    187          * Outline : GlyphSetX
    188          * Include : Glyph.h
    189          * Function Name: GlyphSetX
    190          * Description : Sets the value of the X position in the given Glyph Handle.
    191          * This position is used as the left position of the next Glyph on the screen.
    192          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    193          *          : aX - The given X position.
    194          * Return Value : 0=success, not 0= error
    195          * Calling Functions : main
    196          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    197          T_glyphError GlyphSetX(T_glyphHandle aHandle, uint16_t aX)
   \                     GlyphSetX:
    198          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
    199              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    200          
    201              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X, aX);
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 C5                    PUSH      DE                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 E7                    ONEW      BC                 ;; 1 cycle
   \   000008                       ; ------------------------------------- Block: 8 cycles
   \   000008                       ; ------------------------------------- Total: 8 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
   \   000008                       REQUIRE ?Subroutine4
   \   000008                       ; // Fall through to label ?Subroutine4
    202          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000002 ED....                BR        N:??Subroutine5_0  ;; 3 cycles
   \   000005                       ; ------------------------------------- Block: 4 cycles
   \   000005                       ; ------------------------------------- Total: 4 cycles
   \   000005                       REQUIRE ?CLRL78_V1_0_L00
    203          
    204          /******************************************************************************
    205          * ID : 5.0
    206          * Outline : GlyphSetY
    207          * Include : Glyph.h
    208          * Function Name: GlyphSetY
    209          * Description : Sets the value of the Y position in the given Glyph Handle.
    210          * This position is used as the left position of the next Glyph on the screen.
    211          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    212          *          : aY - The given Y position.
    213          * Return Value : 0=success, not 0= error
    214          * Calling Functions : main
    215          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    216          T_glyphError GlyphSetY(T_glyphHandle aHandle, uint16_t aY)
   \                     GlyphSetY:
    217          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
    218              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    219          
    220              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y, aY);
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 C5                    PUSH      DE                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   00000A ED....                BR        N:?Subroutine4     ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 11 cycles
   \   00000D                       ; ------------------------------------- Total: 11 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    221          }
    222          
    223          /******************************************************************************
    224          * ID : 6.0
    225          * Outline : GlyphSetXY
    226          * Include : Glyph.h
    227          * Function Name: GlyphSetXY
    228          * Description : Sets the value of the X and Y positions in the given Glyph
    229          * Handle.  This position is used as the top left position of the next Glyph
    230          * on the screen.
    231          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    232          *          : aX - The given X position.
    233          *          : aY - The given Y position.
    234          * Return Value : 0=success, not 0= error
    235          * Calling Functions : main
    236          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    237          T_glyphError GlyphSetXY(T_glyphHandle aHandle, uint16_t aX, uint16_t aY)
   \                     GlyphSetXY:
    238          {
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
    239              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    240              T_glyphError error ;
    241          
    242              error = p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X, aX);
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 C5                    PUSH      DE                 ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 E7                    ONEW      BC                 ;; 1 cycle
   \   000009 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00000B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010                       ; * Stack frame (at entry) *
   \   000010                       ; Param size: 0
   \   000010                       ; Auto size: 4
   \   000010 61FA                  CALL      HL                 ;; 3 cycles
    243              if (error == GLYPH_ERROR_NONE)
   \   000012 D1                    CMP0      A                  ;; 1 cycle
   \   000013 DF15                  BNZ       ??GlyphSetContrastBoost_2  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 21 cycles
    244              {
    245                  error = p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y, aY);
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 14                    MOVW      DE, AX             ;; 1 cycle
   \   000018 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001B C5                    PUSH      DE                 ;; 1 cycle
   \   00001C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001E 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   000021 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000023 37                    XCHW      AX, HL             ;; 1 cycle
   \   000024 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 61FA                  CALL      HL                 ;; 3 cycles
   \   00002A                       ; ------------------------------------- Block: 15 cycles
    246              }
    247          
    248              return error ;
   \                     ??GlyphSetContrastBoost_2:
   \   00002A 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00002C D7                    RET                          ;; 6 cycles
   \   00002D                       ; ------------------------------------- Block: 7 cycles
   \   00002D                       ; ------------------------------------- Total: 43 cycles
   \   00002D                       REQUIRE ?CLRL78_V1_0_L00
    249          }
    250          
    251          /******************************************************************************
    252          * ID : 7.0
    253          * Outline : GlyphGetXY
    254          * Include : Glyph.h
    255          * Function Name: GlyphGetXY
    256          * Description : Gets the value of the X and Y positions in the given Glyph
    257          * Handle. The filled values are the current top left position of the next
    258          * character to be placed onto the screen.
    259          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    260          *          : aX - The X position to obtain.
    261          *          : aY - The Y position to obtain.
    262          * Return Value : 0=success, not 0= error
    263          * Calling Functions : main
    264          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    265          T_glyphError GlyphGetXY(T_glyphHandle aHandle, uint16_t *aX, uint16_t *aY)
   \                     GlyphGetXY:
    266          {
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    267              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    268              T_glyphError error ;
    269          
    270              error = p_glyph->iLCDAPI->iRead(aHandle, GLYPH_CHAR_X, aX);
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 C5                    PUSH      DE                 ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 E7                    ONEW      BC                 ;; 1 cycle
   \   000009 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   00000B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010                       ; * Stack frame (at entry) *
   \   000010                       ; Param size: 0
   \   000010                       ; Auto size: 4
   \   000010 61FA                  CALL      HL                 ;; 3 cycles
    271              if (error == GLYPH_ERROR_NONE)
   \   000012 D1                    CMP0      A                  ;; 1 cycle
   \   000013 DF15                  BNZ       ??GlyphSetContrastBoost_3  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 21 cycles
    272              {
    273                  error = p_glyph->iLCDAPI->iRead(aHandle, GLYPH_CHAR_Y, aY);
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 14                    MOVW      DE, AX             ;; 1 cycle
   \   000018 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001B C5                    PUSH      DE                 ;; 1 cycle
   \   00001C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001E 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   000021 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   000023 37                    XCHW      AX, HL             ;; 1 cycle
   \   000024 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 61FA                  CALL      HL                 ;; 3 cycles
   \   00002A                       ; ------------------------------------- Block: 15 cycles
    274              }
    275          
    276              return error ;
   \                     ??GlyphSetContrastBoost_3:
   \   00002A 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   00002C D7                    RET                          ;; 6 cycles
   \   00002D                       ; ------------------------------------- Block: 7 cycles
   \   00002D                       ; ------------------------------------- Total: 43 cycles
   \   00002D                       REQUIRE ?CLRL78_V1_0_L00
    277          }
    278          
    279          /******************************************************************************
    280          * ID : 8.0
    281          * Outline : GlyphSetFont
    282          * Include : Glyph.h
    283          * Function Name: GlyphSetFont
    284          * Description : Set a selected font value from the font enumeration to be used as the
    285          * next font for the next character placed onto the screen.  This font will
    286          * stay set for every character from now on until you decide to set it again.
    287          * 
    288          * The font must have been previously turned on before compile time.  Fonts
    289          * can be turned on and off and then recompiled using the following file:
    290          * GlyphUseFont.h
    291          * which is to be stored inside of your project root directory.
    292          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    293          *          : aFont - A value from the Font Enumeration.
    294          * Return Value : 0=success, not 0= error
    295          * Calling Functions : main
    296          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    297          T_glyphError GlyphSetFont(T_glyphHandle aHandle, T_glyphFont aFont)
   \                     GlyphSetFont:
    298          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    299              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    300           
    301              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_FONT, (uint16_t)aFont);
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 74                    MOV       E, A               ;; 1 cycle
   \   000005 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000007 C5                    PUSH      DE                 ;; 1 cycle
   \   000008 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000009 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000A 320300                MOVW      BC, #0x3           ;; 1 cycle
   \   00000D ED....                BR        N:??Subroutine6_0  ;; 3 cycles
   \   000010                       ; ------------------------------------- Block: 13 cycles
   \   000010                       ; ------------------------------------- Total: 13 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    302          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000002 37                    XCHW      AX, HL             ;; 1 cycle
   \   000003 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000006                       ; ------------------------------------- Block: 3 cycles
   \   000006                       ; ------------------------------------- Total: 3 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00
   \   000006                       REQUIRE ??Subroutine7_0
   \   000006                       ; // Fall through to label ??Subroutine7_0

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000 C4                    POP       DE                 ;; 1 cycle
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001                       ; * Stack frame (at entry) *
   \   000001                       ; Param size: 0
   \   000001                       ; Auto size: 0
   \   000001 61FA                  CALL      HL                 ;; 3 cycles
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 C2                    POP       BC                 ;; 1 cycle
   \   000005 D7                    RET                          ;; 6 cycles
   \   000006                       ; ------------------------------------- Block: 12 cycles
   \   000006                       ; ------------------------------------- Total: 12 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00
    303          
    304          /******************************************************************************
    305          * ID : 9.0
    306          * Outline : GlyphGetFont
    307          * Include : Glyph.h
    308          * Function Name: GlyphGetFont
    309          * Description : Retrieve the enumeration value for the currently selected font.
    310          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    311          *          : aFont - A value from the Font Enumeration retrieved.
    312          * Return Value : 0=success, not 0= error
    313          * Calling Functions : main
    314          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    315          T_glyphError GlyphGetFont(T_glyphHandle aHandle, T_glyphFont *aFont)
   \                     GlyphGetFont:
    316          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
    317              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    318          
    319              return p_glyph->iLCDAPI->iRead(aHandle, GLYPH_FONT, (uint16_t *)aFont) ;
   \   000004 C5                    PUSH      DE                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 320300                MOVW      BC, #0x3           ;; 1 cycle
   \   00000A ED....                BR        N:?Subroutine1     ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 11 cycles
   \   00000D                       ; ------------------------------------- Total: 11 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    320          }
    321          
    322          /******************************************************************************
    323          * ID : 10.0
    324          * Outline : GlyphSetDrawMode
    325          * Include : Glyph.h
    326          * Function Name: GlyphSetDrawMode
    327          * Description : The draw mode function. Causes a draw procedure to happen on
    328           * the LCD display.  The procedure is chosen using the T_glyphDrawMode
    329           * enumeration in the Glyph.h file.  Operations are described as:
    330           *   GLYPH_CMD_NOP            -- Does Nothing
    331           *   GLYPH_CMD_SCREEN_CLEAR   -- Clears the screen to blank no pixels on.
    332           *   GLYPH_CMD_SCREEN_INVERT  -- Inverts the entire screen.  Black is white.
    333           *   GLYPH_CMD_SCREEN_REGULAR -- Used on startup to create a normal screen.
    334           *   GLYPH_CMD_SCREEN_SLEEP   -- Puts the LCD in a low power blank screen.
    335           *   GLYPH_CMD_SCREEN_WAKE    -- Restores the LCD from low power sleep.
    336           *   GLYPH_CMD_TEST_PATTERN   -- Displays a test patter.
    337           *   GLYPH_CMD_DRAW_BLOCK     -- Fills X to X2 and Y to Y2
    338           *   GLYPH_CMD_ERASE_BLOCK    -- Erases X to X2 and Y to Y2
    339          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    340          *          : aMode - A value from the Draw mode Enumeration.
    341          * Return Value : 0=success, not 0= error
    342          * Calling Functions : main
    343          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    344          T_glyphError GlyphSetDrawMode(T_glyphHandle aHandle, T_glyphDrawMode aMode)
   \                     GlyphSetDrawMode:
    345          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    346              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    347          
    348              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_DRAW_CMD, aMode) ;
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 74                    MOV       E, A               ;; 1 cycle
   \   000005 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000007 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   00000A                       ; ------------------------------------- Block: 9 cycles
   \   00000A                       ; ------------------------------------- Total: 9 cycles
   \   00000A                       REQUIRE ?CLRL78_V1_0_L00
    349          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000002 14                    MOVW      DE, AX             ;; 1 cycle
   \   000003 320500                MOVW      BC, #0x5           ;; 1 cycle
   \   000006                       ; ------------------------------------- Block: 4 cycles
   \   000006                       ; ------------------------------------- Total: 4 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00
   \   000006                       REQUIRE ??Subroutine6_0
   \   000006                       ; // Fall through to label ??Subroutine6_0
    350          
    351          /******************************************************************************
    352          * ID : 11.0
    353          * Outline : GlyphChar
    354          * Include : Glyph.h
    355          * Function Name: GlyphChar
    356          * Description : Draws the given character in the currently chosen font at
    357          * the current X and Y top left starting pixel on the LCD Screen.
    358          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    359          *          : aChar - The given character.
    360          * Return Value : 0=success, not 0= error
    361          * Calling Functions : main
    362          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    363          T_glyphError GlyphChar(T_glyphHandle aHandle, uint16_t aChar)
   \                     GlyphChar:
    364          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
    365              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    366          
    367              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_DRAW_CHAR, aChar) ;
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 C5                    PUSH      DE                 ;; 1 cycle
   \   000005 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000006 14                    MOVW      DE, AX             ;; 1 cycle
   \   000007 320400                MOVW      BC, #0x4           ;; 1 cycle
   \   00000A ED....                BR        N:?Subroutine4     ;; 3 cycles
   \   00000D                       ; ------------------------------------- Block: 11 cycles
   \   00000D                       ; ------------------------------------- Total: 11 cycles
   \   00000D                       REQUIRE ?CLRL78_V1_0_L00
    368          }
    369          
    370          /******************************************************************************
    371          * ID : 12.0
    372          * Outline : GlyphString
    373          * Include : Glyph.h
    374          * Function Name: GlyphString
    375          * Description : Draws the given character string in the currently chosen font at the
    376          * current X and Y top left starting pixel on the LCD Screen.
    377          *
    378          * Each character of the string is set from the start of the last character
    379          * by the number of aSpacing given.  So if the font is say 8 pixels wide,
    380          * a good number to use here might be 10 pixels which would give you
    381          * two pixels between each character in the string.
    382          *
    383          * You must count the number of characters you wish to put to the LCD
    384          * screen and enter that number in the aLength variable.
    385          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    386          *          : aString - The given character string.
    387          *          : aLength - The count of characters in the string
    388          *                      you wish to display on the LCD.
    389          * Return Value : 0=success, not 0= error
    390          * Calling Functions : main
    391          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    392          T_glyphError GlyphString(T_glyphHandle aHandle, uint8_t * aString, uint8_t aLength)
   \                     GlyphString:
    393          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 2004                  SUBW      SP, #0x4           ;; 1 cycle
    394              uint16_t nIndex = 0 ;
    395          
    396              nIndex = 0 ;
   \   000004 65                    MOV       A, D               ;; 1 cycle
   \   000005 C3                    PUSH      BC                 ;; 1 cycle
   \   000006 D1                    CMP0      A                  ;; 1 cycle
   \   000007 C6                    POP       HL                 ;; 1 cycle
   \   000008 DD30                  BZ        ??GlyphSetContrastBoost_4  ;; 4 cycles
   \   00000A                       ; ------------------------------------- Block: 11 cycles
   \   00000A                       ; * Stack frame (at entry) *
   \   00000A                       ; Param size: 0
   \   00000A                       ; Auto size: 6
   \   00000A 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000B B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   00000D 65                    MOV       A, D               ;; 1 cycle
   \   00000E 70                    MOV       X, A               ;; 1 cycle
   \   00000F F1                    CLRB      A                  ;; 1 cycle
   \   000010 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000012                       ; ------------------------------------- Block: 6 cycles
    397              while (nIndex < aLength)
    398              {
    399                  GlyphChar(aHandle, aString[nIndex]) ;
   \                     ??GlyphString_0:
   \   000012 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000014 16                    MOVW      HL, AX             ;; 1 cycle
   \   000015 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000017 8B                    MOV       A, [HL]            ;; 1 cycle
   \   000018 74                    MOV       E, A               ;; 1 cycle
   \   000019 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00001B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001C C5                    PUSH      DE                 ;; 1 cycle
   \   00001D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001F 320400                MOVW      BC, #0x4           ;; 1 cycle
   \   000022 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000024 37                    XCHW      AX, HL             ;; 1 cycle
   \   000025 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000028 C4                    POP       DE                 ;; 1 cycle
   \   000029 61FA                  CALL      HL                 ;; 3 cycles
    400                  nIndex++ ;
   \   00002B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00002D A1                    INCW      AX                 ;; 1 cycle
   \   00002E B802                  MOVW      [SP+0x02], AX      ;; 1 cycle
   \   000030 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000032 B1                    DECW      AX                 ;; 1 cycle
    401              }
   \   000033 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000036 B800                  MOVW      [SP], AX           ;; 1 cycle
   \   000038 DFD8                  BNZ       ??GlyphString_0    ;; 4 cycles
   \   00003A                       ; ------------------------------------- Block: 29 cycles
    402          
    403              return GLYPH_ERROR_NONE ;
   \                     ??GlyphSetContrastBoost_4:
   \   00003A 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   00003C F1                    CLRB      A                  ;; 1 cycle
   \   00003D C4                    POP       DE                 ;; 1 cycle
   \   00003E D7                    RET                          ;; 6 cycles
   \   00003F                       ; ------------------------------------- Block: 9 cycles
   \   00003F                       ; ------------------------------------- Total: 55 cycles
   \   00003F                       REQUIRE ?CLRL78_V1_0_L00
    404          }
    405          
    406          /******************************************************************************
    407          * ID : 13.0
    408          * Outline : GlyphGetVersionInfo
    409          * Include : Glyph.h
    410          * Function Name: GlyphGetVersionInfo
    411          * Description : Fills the given T_glyphVersionInfo with version data.
    412          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    413          *          : aInfo - The given version info structure to fill.
    414          * Return Value : 0=success, not 0= error
    415          * Calling Functions : main
    416          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    417          T_glyphError GlyphGetVersionInfo(T_glyphHandle aHandle, T_glyphVersionInfo *aInfo)
   \                     GlyphGetVersionInfo:
    418          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C1                    PUSH      AX                 ;; 1 cycle
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C1                    PUSH      AX                 ;; 1 cycle
    419              uint16_t nVersionValue = 0 ;
   \   000004 F6                    CLRW      AX                 ;; 1 cycle
   \   000005 B800                  MOVW      [SP], AX           ;; 1 cycle
    420              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    421          
    422              if (p_glyph->iLCDAPI->iRead(aHandle, GLYPH_API_MAJOR_VERSION, &nVersionValue) == GLYPH_ERROR_NONE) {
   \   000007 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000009 EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   00000C 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000D C5                    PUSH      DE                 ;; 1 cycle
   \   00000E AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00000F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000010 320800                MOVW      BC, #0x8           ;; 1 cycle
   \   000013 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   000015 37                    XCHW      AX, HL             ;; 1 cycle
   \   000016 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000019 C4                    POP       DE                 ;; 1 cycle
   \   00001A                       ; * Stack frame (at entry) *
   \   00001A                       ; Param size: 0
   \   00001A                       ; Auto size: 6
   \   00001A 61FA                  CALL      HL                 ;; 3 cycles
   \   00001C D1                    CMP0      A                  ;; 1 cycle
   \   00001D 61E8                  SKZ                          ;; 4 cycles
   \   00001F ED....                BR        N:??GlyphSetContrastBoost_5  ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 25 cycles
    423                  aInfo->nVersionAPIMajor = nVersionValue ;
   \   000022 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000024 60                    MOV       A, X               ;; 1 cycle
   \   000025 73                    MOV       B, A               ;; 1 cycle
   \   000026 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000028 16                    MOVW      HL, AX             ;; 1 cycle
   \   000029 63                    MOV       A, B               ;; 1 cycle
   \   00002A 9C28                  MOV       [HL+0x28], A       ;; 1 cycle
    424                  if (p_glyph->iLCDAPI->iRead(aHandle, GLYPH_API_MINOR_VERSION, &nVersionValue) == GLYPH_ERROR_NONE) {
   \   00002C A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00002E EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   000031 16                    MOVW      HL, AX             ;; 1 cycle
   \   000032 C5                    PUSH      DE                 ;; 1 cycle
   \   000033 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000034 14                    MOVW      DE, AX             ;; 1 cycle
   \   000035 320900                MOVW      BC, #0x9           ;; 1 cycle
   \   000038 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   00003A 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003B CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00003E C4                    POP       DE                 ;; 1 cycle
   \   00003F 61FA                  CALL      HL                 ;; 3 cycles
   \   000041 D1                    CMP0      A                  ;; 1 cycle
   \   000042 61E8                  SKZ                          ;; 4 cycles
   \   000044 ED....                BR        N:??GlyphSetContrastBoost_5  ;; 4 cycles
   \   000047                       ; ------------------------------------- Block: 26 cycles
    425                      aInfo->nVersionAPIMinor = nVersionValue ;
   \   000047 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000049 60                    MOV       A, X               ;; 1 cycle
   \   00004A 73                    MOV       B, A               ;; 1 cycle
   \   00004B A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004E 63                    MOV       A, B               ;; 1 cycle
   \   00004F 9C29                  MOV       [HL+0x29], A       ;; 1 cycle
    426                      if (p_glyph->iLCDAPI->iRead(aHandle, GLYPH_IMPLEMENTATION_ID, &nVersionValue) == GLYPH_ERROR_NONE) {
   \   000051 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000053 EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   000056 16                    MOVW      HL, AX             ;; 1 cycle
   \   000057 C5                    PUSH      DE                 ;; 1 cycle
   \   000058 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000059 14                    MOVW      DE, AX             ;; 1 cycle
   \   00005A 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   00005D AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   00005F 37                    XCHW      AX, HL             ;; 1 cycle
   \   000060 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000063 C4                    POP       DE                 ;; 1 cycle
   \   000064 61FA                  CALL      HL                 ;; 3 cycles
   \   000066 D1                    CMP0      A                  ;; 1 cycle
   \   000067 61E8                  SKZ                          ;; 4 cycles
   \   000069 ED....                BR        N:??GlyphSetContrastBoost_5  ;; 4 cycles
   \   00006C                       ; ------------------------------------- Block: 26 cycles
    427                          aInfo->nImplementationID = nVersionValue ;
   \   00006C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00006E 60                    MOV       A, X               ;; 1 cycle
   \   00006F 73                    MOV       B, A               ;; 1 cycle
   \   000070 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000072 16                    MOVW      HL, AX             ;; 1 cycle
   \   000073 63                    MOV       A, B               ;; 1 cycle
   \   000074 9C2C                  MOV       [HL+0x2C], A       ;; 1 cycle
    428                          if (p_glyph->iLCDAPI->iRead(aHandle, GLYPH_IMPL_MAJOR_VERSION, &nVersionValue) == GLYPH_ERROR_NONE) {
   \   000076 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   000078 EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   00007B 16                    MOVW      HL, AX             ;; 1 cycle
   \   00007C C5                    PUSH      DE                 ;; 1 cycle
   \   00007D AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00007E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00007F 320B00                MOVW      BC, #0xB           ;; 1 cycle
   \   000082 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   000084 37                    XCHW      AX, HL             ;; 1 cycle
   \   000085 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000088 C4                    POP       DE                 ;; 1 cycle
   \   000089 61FA                  CALL      HL                 ;; 3 cycles
   \   00008B D1                    CMP0      A                  ;; 1 cycle
   \   00008C DF63                  BNZ       ??GlyphSetContrastBoost_5  ;; 4 cycles
   \   00008E                       ; ------------------------------------- Block: 26 cycles
    429                              aInfo->nVersionIMPLMajor = nVersionValue ;
   \   00008E A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000090 60                    MOV       A, X               ;; 1 cycle
   \   000091 73                    MOV       B, A               ;; 1 cycle
   \   000092 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000094 16                    MOVW      HL, AX             ;; 1 cycle
   \   000095 63                    MOV       A, B               ;; 1 cycle
   \   000096 9C2A                  MOV       [HL+0x2A], A       ;; 1 cycle
    430                              if (p_glyph->iLCDAPI->iRead(aHandle, GLYPH_IMPL_MINOR_VERSION, &nVersionValue) == GLYPH_ERROR_NONE) {
   \   000098 A804                  MOVW      AX, [SP+0x04]      ;; 1 cycle
   \   00009A EBF8FF                MOVW      DE, SP             ;; 1 cycle
   \   00009D 16                    MOVW      HL, AX             ;; 1 cycle
   \   00009E C5                    PUSH      DE                 ;; 1 cycle
   \   00009F AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   0000A0 14                    MOVW      DE, AX             ;; 1 cycle
   \   0000A1 320C00                MOVW      BC, #0xC           ;; 1 cycle
   \   0000A4 AA20                  MOVW      AX, [DE+0x20]      ;; 1 cycle
   \   0000A6 37                    XCHW      AX, HL             ;; 1 cycle
   \   0000A7 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   0000AA C4                    POP       DE                 ;; 1 cycle
   \   0000AB 61FA                  CALL      HL                 ;; 3 cycles
   \   0000AD D1                    CMP0      A                  ;; 1 cycle
   \   0000AE DF41                  BNZ       ??GlyphSetContrastBoost_5  ;; 4 cycles
   \   0000B0                       ; ------------------------------------- Block: 26 cycles
    431                                  aInfo->nVersionIMPLMinor = nVersionValue ;
   \   0000B0 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   0000B2 60                    MOV       A, X               ;; 1 cycle
   \   0000B3 73                    MOV       B, A               ;; 1 cycle
   \   0000B4 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   0000B6 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000B7 63                    MOV       A, B               ;; 1 cycle
   \   0000B8 9C2B                  MOV       [HL+0x2B], A       ;; 1 cycle
    432                                  sprintf((char *)aInfo->strVersionAPI, "API v. %d.0%d",
    433                                          (int)aInfo->nVersionAPIMajor,
    434                                          (int)aInfo->nVersionAPIMinor) ;
   \   0000BA 8C29                  MOV       A, [HL+0x29]       ;; 1 cycle
   \   0000BC 70                    MOV       X, A               ;; 1 cycle
   \   0000BD 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000BF C1                    PUSH      AX                 ;; 1 cycle
   \   0000C0 8C28                  MOV       A, [HL+0x28]       ;; 1 cycle
   \   0000C2 70                    MOV       X, A               ;; 1 cycle
   \   0000C3 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000C5 C1                    PUSH      AX                 ;; 1 cycle
   \   0000C6 32....                MOVW      BC, #`?<Constant "API v. %d.0%d">`  ;; 1 cycle
   \   0000C9 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000CA FD....                CALL      sprintf            ;; 3 cycles
    435                                  sprintf((char *)aInfo->strVersionIMPL, "Impl. v. %d.%d%d",
    436                                          (int)aInfo->nVersionIMPLMajor,
    437                                          (int)aInfo->nImplementationID,
    438                                          (int)aInfo->nVersionIMPLMinor) ;
   \   0000CD A806                  MOVW      AX, [SP+0x06]      ;; 1 cycle
   \   0000CF 16                    MOVW      HL, AX             ;; 1 cycle
   \   0000D0 32....                MOVW      BC, #`?<Constant "Impl. v. %d.%d%d">`  ;; 1 cycle
   \   0000D3 8C2B                  MOV       A, [HL+0x2B]       ;; 1 cycle
   \   0000D5 70                    MOV       X, A               ;; 1 cycle
   \   0000D6 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000D8 C1                    PUSH      AX                 ;; 1 cycle
   \   0000D9 8C2C                  MOV       A, [HL+0x2C]       ;; 1 cycle
   \   0000DB 70                    MOV       X, A               ;; 1 cycle
   \   0000DC 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000DE C1                    PUSH      AX                 ;; 1 cycle
   \   0000DF 8C2A                  MOV       A, [HL+0x2A]       ;; 1 cycle
   \   0000E1 70                    MOV       X, A               ;; 1 cycle
   \   0000E2 317B                  SAR       A, 0x7             ;; 1 cycle
   \   0000E4 C1                    PUSH      AX                 ;; 1 cycle
   \   0000E5 17                    MOVW      AX, HL             ;; 1 cycle
   \   0000E6 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   0000E9 FD....                CALL      sprintf            ;; 3 cycles
    439          
    440                                  return GLYPH_ERROR_NONE ;
   \   0000EC F1                    CLRB      A                  ;; 1 cycle
   \   0000ED 100A                  ADDW      SP, #0xA           ;; 1 cycle
   \   0000EF EF01                  BR        S:??GlyphSetContrastBoost_6  ;; 3 cycles
   \   0000F1                       ; ------------------------------------- Block: 45 cycles
    441                              }
    442                          }
    443                      }
    444                  }
    445              }
    446          
    447              return GLYPH_ERROR_ILLEGAL_OPERATION ;
   \                     ??GlyphSetContrastBoost_5:
   \   0000F1 E1                    ONEB      A                  ;; 1 cycle
   \   0000F2                       ; ------------------------------------- Block: 1 cycles
   \                     ??GlyphSetContrastBoost_6:
   \   0000F2 1006                  ADDW      SP, #0x6           ;; 1 cycle
   \   0000F4 C4                    POP       DE                 ;; 1 cycle
   \   0000F5 D7                    RET                          ;; 6 cycles
   \   0000F6                       ; ------------------------------------- Block: 8 cycles
   \   0000F6                       ; ------------------------------------- Total: 183 cycles
   \   0000F6                       REQUIRE ?CLRL78_V1_0_L00
    448          }
    449          
    450          /******************************************************************************
    451          * ID : 14.0
    452          * Outline : GlyphClearScreen
    453          * Include : Glyph.h
    454          * Function Name: GlyphClearScreen
    455          * Description : Clears the LCD Screen to white.
    456          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    457          * Return Value : 0=success, not 0= error
    458          * Calling Functions : main
    459          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    460          T_glyphError GlyphClearScreen(T_glyphHandle aHandle)
   \                     GlyphClearScreen:
    461          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    462              return GlyphSetDrawMode(aHandle, GLYPH_CMD_SCREEN_CLEAR) ;
   \   000002 E6                    ONEW      AX                 ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 14                    MOVW      DE, AX             ;; 1 cycle
   \   000005 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   000008                       ; ------------------------------------- Block: 8 cycles
   \   000008                       ; ------------------------------------- Total: 8 cycles
   \   000008                       REQUIRE ?CLRL78_V1_0_L00
    463          }
    464          
    465          /******************************************************************************
    466          * ID : 15.0
    467          * Outline : GlyphInvertScreen
    468          * Include : Glyph.h
    469          * Function Name: GlyphInvertScreen
    470          * Description : Inverts every pixel on the screen from white to dark and dark to white.
    471          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    472          * Return Value : 0=success, not 0= error
    473          * Calling Functions : main
    474          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    475          T_glyphError GlyphInvertScreen(T_glyphHandle aHandle)
   \                     GlyphInvertScreen:
    476          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    477              return GlyphSetDrawMode(aHandle, GLYPH_CMD_SCREEN_INVERT) ;
   \   000003 340200                MOVW      DE, #0x2           ;; 1 cycle
   \   000006 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 7 cycles
   \   000009                       ; ------------------------------------- Total: 7 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    478          }
    479          
    480          /******************************************************************************
    481          * ID : 16.0
    482          * Outline : GlyphNormalScreen
    483          * Include : Glyph.h
    484          * Function Name: GlyphNormalScreen
    485          * Description : Sets up the normal LCD Screen right after initialization
    486          * startup.
    487          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    488          * Return Value : 0=success, not 0= error
    489          * Calling Functions : main
    490          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    491          T_glyphError GlyphNormalScreen(T_glyphHandle aHandle)
   \                     GlyphNormalScreen:
    492          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    493              return GlyphSetDrawMode(aHandle, GLYPH_CMD_SCREEN_REGULAR) ;
   \   000003 340300                MOVW      DE, #0x3           ;; 1 cycle
   \   000006 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 7 cycles
   \   000009                       ; ------------------------------------- Total: 7 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    494          }
    495          
    496          /******************************************************************************
    497          * ID : 17.0
    498          * Outline : GlyphSleep
    499          * Include : Glyph.h
    500          * Function Name: GlyphSleep
    501          * Description : Puts the LCD in a low power blank screen.
    502          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    503          * Return Value : 0=success, not 0= error
    504          * Calling Functions : main
    505          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    506          T_glyphError GlyphSleep(T_glyphHandle aHandle)
   \                     GlyphSleep:
    507          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    508              return GlyphSetDrawMode(aHandle, GLYPH_CMD_SCREEN_SLEEP) ;
   \   000003 340400                MOVW      DE, #0x4           ;; 1 cycle
   \   000006 ED....                BR        N:?Subroutine0     ;; 3 cycles
   \   000009                       ; ------------------------------------- Block: 7 cycles
   \   000009                       ; ------------------------------------- Total: 7 cycles
   \   000009                       REQUIRE ?CLRL78_V1_0_L00
    509          }
    510          
    511          /******************************************************************************
    512          * ID : 18.0
    513          * Outline : GlyphSleep
    514          * Include : Glyph.h
    515          * Function Name: GlyphSleep
    516          * Description : Takes the LCD out of low power sleep mode and redraws the
    517          * current image.
    518          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    519          * Return Value : 0=success, not 0= error
    520          * Calling Functions : main
    521          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    522          T_glyphError GlyphWake(T_glyphHandle aHandle)
   \                     GlyphWake:
    523          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
    524              return GlyphSetDrawMode(aHandle, GLYPH_CMD_SCREEN_WAKE) ;
   \   000002 340500                MOVW      DE, #0x5           ;; 1 cycle
   \   000005 C5                    PUSH      DE                 ;; 1 cycle
   \   000006 16                    MOVW      HL, AX             ;; 1 cycle
   \   000007 C2                    POP       BC                 ;; 1 cycle
   \   000008 C5                    PUSH      DE                 ;; 1 cycle
   \   000009 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00000A 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000B CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000E AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000010 37                    XCHW      AX, HL             ;; 1 cycle
   \   000011 ED....                BR        N:??Subroutine7_0  ;; 3 cycles
   \   000014                       ; ------------------------------------- Block: 15 cycles
   \   000014                       ; ------------------------------------- Total: 15 cycles
   \   000014                       REQUIRE ?CLRL78_V1_0_L00
    525          }
    526          
    527          /******************************************************************************
    528          * ID : 19.0
    529          * Outline : GlyphDrawTestPattern
    530          * Include : Glyph.h
    531          * Function Name: GlyphDrawTestPattern
    532          * Description : Draws a test image onto the LCD Screen.
    533          * current image.
    534          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    535          * Return Value : 0=success, not 0= error
    536          * Calling Functions : main
    537          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    538          T_glyphError GlyphDrawTestPattern(T_glyphHandle aHandle)
   \                     GlyphDrawTestPattern:
    539          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 16                    MOVW      HL, AX             ;; 1 cycle
    540              return GlyphSetDrawMode(aHandle, GLYPH_CMD_TEST_PATTERN) ;
   \   000003 340600                MOVW      DE, #0x6           ;; 1 cycle
   \   000006                       ; ------------------------------------- Block: 4 cycles
   \   000006                       ; ------------------------------------- Total: 4 cycles
   \   000006                       REQUIRE ?CLRL78_V1_0_L00
   \   000006                       REQUIRE ?Subroutine0
   \   000006                       ; // Fall through to label ?Subroutine0
    541          }
    542          
    543          /******************************************************************************
    544          * ID : 20.0
    545          * Outline : GlyphDrawBlock
    546          * Include : Glyph.h
    547          * Function Name: GlyphDrawBlock
    548          * Description : Draws a set of dark pixels from the X and Y position to the
    549          * X2 and Y2 position.
    550          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    551          *          : aX1 - the given X position.
    552          *          : aY1 - the given Y position.
    553          *          : aX2 - the given X2 position.
    554          *          : aY2 - the given Y2 position.
    555          * Return Value : 0=success, not 0= error
    556          * Calling Functions : main
    557          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    558          T_glyphError GlyphDrawBlock(T_glyphHandle aHandle, uint16_t aX1, uint16_t aY1, uint16_t aX2, uint16_t aY2)
   \                     GlyphDrawBlock:
    559          {
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
    560              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    561          
    562              if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X, aX1) == GLYPH_ERROR_NONE) {
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 C5                    PUSH      DE                 ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 E7                    ONEW      BC                 ;; 1 cycle
   \   000009 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00000B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010                       ; * Stack frame (at entry) *
   \   000010                       ; Param size: 4
   \   000010                       ; Auto size: 4
   \   000010 61FA                  CALL      HL                 ;; 3 cycles
   \   000012 D1                    CMP0      A                  ;; 1 cycle
   \   000013 DF5F                  BNZ       ??GlyphSetContrastBoost_7  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 21 cycles
    563                  if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y, aY1) == GLYPH_ERROR_NONE) {
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 14                    MOVW      DE, AX             ;; 1 cycle
   \   000018 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001B C5                    PUSH      DE                 ;; 1 cycle
   \   00001C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001E 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   000021 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000023 37                    XCHW      AX, HL             ;; 1 cycle
   \   000024 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 61FA                  CALL      HL                 ;; 3 cycles
   \   00002A D1                    CMP0      A                  ;; 1 cycle
   \   00002B DF47                  BNZ       ??GlyphSetContrastBoost_7  ;; 4 cycles
   \   00002D                       ; ------------------------------------- Block: 20 cycles
    564                      if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X2, aX2) == GLYPH_ERROR_NONE) {
   \   00002D A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00002F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000030 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000032 16                    MOVW      HL, AX             ;; 1 cycle
   \   000033 C5                    PUSH      DE                 ;; 1 cycle
   \   000034 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000035 14                    MOVW      DE, AX             ;; 1 cycle
   \   000036 320D00                MOVW      BC, #0xD           ;; 1 cycle
   \   000039 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00003B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00003F C4                    POP       DE                 ;; 1 cycle
   \   000040 61FA                  CALL      HL                 ;; 3 cycles
   \   000042 D1                    CMP0      A                  ;; 1 cycle
   \   000043 DF2F                  BNZ       ??GlyphSetContrastBoost_7  ;; 4 cycles
   \   000045                       ; ------------------------------------- Block: 20 cycles
    565                          if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y2, aY2) == GLYPH_ERROR_NONE) {
   \   000045 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000047 14                    MOVW      DE, AX             ;; 1 cycle
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B C5                    PUSH      DE                 ;; 1 cycle
   \   00004C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00004D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004E 320E00                MOVW      BC, #0xE           ;; 1 cycle
   \   000051 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000053 37                    XCHW      AX, HL             ;; 1 cycle
   \   000054 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000057 C4                    POP       DE                 ;; 1 cycle
   \   000058 61FA                  CALL      HL                 ;; 3 cycles
   \   00005A D1                    CMP0      A                  ;; 1 cycle
   \   00005B DF17                  BNZ       ??GlyphSetContrastBoost_7  ;; 4 cycles
   \   00005D                       ; ------------------------------------- Block: 20 cycles
    566                              return GlyphSetDrawMode(aHandle, GLYPH_CMD_DRAW_BLOCK) ;
   \   00005D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005F 340700                MOVW      DE, #0x7           ;; 1 cycle
   \   000062 16                    MOVW      HL, AX             ;; 1 cycle
   \   000063 C5                    PUSH      DE                 ;; 1 cycle
   \   000064 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000065 14                    MOVW      DE, AX             ;; 1 cycle
   \   000066 320500                MOVW      BC, #0x5           ;; 1 cycle
   \   000069 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00006B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00006C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00006F C4                    POP       DE                 ;; 1 cycle
   \   000070 61FA                  CALL      HL                 ;; 3 cycles
   \   000072 EF01                  BR        S:??GlyphSetContrastBoost_8  ;; 3 cycles
   \   000074                       ; ------------------------------------- Block: 17 cycles
    567                          }
    568                      }
    569                  }
    570              }
    571          
    572              return GLYPH_ERROR_ILLEGAL_OPERATION ;
   \                     ??GlyphSetContrastBoost_7:
   \   000074 E1                    ONEB      A                  ;; 1 cycle
   \   000075                       ; ------------------------------------- Block: 1 cycles
   \                     ??GlyphSetContrastBoost_8:
   \   000075                       REQUIRE ?CLRL78_V1_0_L00
   \   000075                       REQUIRE ?Subroutine3
   \   000075                       ; // Fall through to label ?Subroutine3
    573          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000002 FD....                CALL      N:?FUNC_LEAVE_L06
   \   000005 0400                  DW        0x4                ;; 3 cycles
   \   000007                       ; ------------------------------------- Block: 4 cycles
   \   000007                       ; ------------------------------------- Total: 4 cycles
   \   000007                       REQUIRE ?CLRL78_V1_0_L00
    574          
    575          /******************************************************************************
    576          * ID : 21.0
    577          * Outline : GlyphEraseBlock
    578          * Include : Glyph.h
    579          * Function Name: GlyphEraseBlock
    580          * Description : Clears to a set of white pixels from the X and Y position to the
    581          * X2 and Y2 position.
    582          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    583          *          : aX1 - the given X position.
    584          *          : aY1 - the given Y position.
    585          *          : aX2 - the given X2 position.
    586          *          : aY2 - the given Y2 position.
    587          * Return Value : 0=success, not 0= error
    588          * Calling Functions : main
    589          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    590          T_glyphError GlyphEraseBlock(T_glyphHandle aHandle, uint16_t aX1, uint16_t aY1, uint16_t aX2, uint16_t aY2)
   \                     GlyphEraseBlock:
    591          {
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
    592              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    593          
    594              if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X, aX1) == GLYPH_ERROR_NONE) {
   \   000002 C3                    PUSH      BC                 ;; 1 cycle
   \   000003 C4                    POP       DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 C5                    PUSH      DE                 ;; 1 cycle
   \   000006 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000007 14                    MOVW      DE, AX             ;; 1 cycle
   \   000008 E7                    ONEW      BC                 ;; 1 cycle
   \   000009 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00000B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00000C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00000F C4                    POP       DE                 ;; 1 cycle
   \   000010                       ; * Stack frame (at entry) *
   \   000010                       ; Param size: 4
   \   000010                       ; Auto size: 4
   \   000010 61FA                  CALL      HL                 ;; 3 cycles
   \   000012 D1                    CMP0      A                  ;; 1 cycle
   \   000013 DF5F                  BNZ       ??GlyphSetContrastBoost_9  ;; 4 cycles
   \   000015                       ; ------------------------------------- Block: 21 cycles
    595                  if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y, aY1) == GLYPH_ERROR_NONE) {
   \   000015 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000017 14                    MOVW      DE, AX             ;; 1 cycle
   \   000018 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00001A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00001B C5                    PUSH      DE                 ;; 1 cycle
   \   00001C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00001E 320200                MOVW      BC, #0x2           ;; 1 cycle
   \   000021 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000023 37                    XCHW      AX, HL             ;; 1 cycle
   \   000024 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000027 C4                    POP       DE                 ;; 1 cycle
   \   000028 61FA                  CALL      HL                 ;; 3 cycles
   \   00002A D1                    CMP0      A                  ;; 1 cycle
   \   00002B DF47                  BNZ       ??GlyphSetContrastBoost_9  ;; 4 cycles
   \   00002D                       ; ------------------------------------- Block: 20 cycles
    596                      if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_X2, aX2) == GLYPH_ERROR_NONE) {
   \   00002D A808                  MOVW      AX, [SP+0x08]      ;; 1 cycle
   \   00002F 14                    MOVW      DE, AX             ;; 1 cycle
   \   000030 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000032 16                    MOVW      HL, AX             ;; 1 cycle
   \   000033 C5                    PUSH      DE                 ;; 1 cycle
   \   000034 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000035 14                    MOVW      DE, AX             ;; 1 cycle
   \   000036 320D00                MOVW      BC, #0xD           ;; 1 cycle
   \   000039 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00003B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00003C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00003F C4                    POP       DE                 ;; 1 cycle
   \   000040 61FA                  CALL      HL                 ;; 3 cycles
   \   000042 D1                    CMP0      A                  ;; 1 cycle
   \   000043 DF2F                  BNZ       ??GlyphSetContrastBoost_9  ;; 4 cycles
   \   000045                       ; ------------------------------------- Block: 20 cycles
    597                          if (p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CHAR_Y2, aY2) == GLYPH_ERROR_NONE) {
   \   000045 A80A                  MOVW      AX, [SP+0x0A]      ;; 1 cycle
   \   000047 14                    MOVW      DE, AX             ;; 1 cycle
   \   000048 A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00004A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00004B C5                    PUSH      DE                 ;; 1 cycle
   \   00004C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00004D 14                    MOVW      DE, AX             ;; 1 cycle
   \   00004E 320E00                MOVW      BC, #0xE           ;; 1 cycle
   \   000051 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   000053 37                    XCHW      AX, HL             ;; 1 cycle
   \   000054 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000057 C4                    POP       DE                 ;; 1 cycle
   \   000058 61FA                  CALL      HL                 ;; 3 cycles
   \   00005A D1                    CMP0      A                  ;; 1 cycle
   \   00005B DF17                  BNZ       ??GlyphSetContrastBoost_9  ;; 4 cycles
   \   00005D                       ; ------------------------------------- Block: 20 cycles
    598                              return GlyphSetDrawMode(aHandle, GLYPH_CMD_ERASE_BLOCK) ;
   \   00005D A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   00005F 340800                MOVW      DE, #0x8           ;; 1 cycle
   \   000062 16                    MOVW      HL, AX             ;; 1 cycle
   \   000063 C5                    PUSH      DE                 ;; 1 cycle
   \   000064 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000065 14                    MOVW      DE, AX             ;; 1 cycle
   \   000066 320500                MOVW      BC, #0x5           ;; 1 cycle
   \   000069 AA22                  MOVW      AX, [DE+0x22]      ;; 1 cycle
   \   00006B 37                    XCHW      AX, HL             ;; 1 cycle
   \   00006C CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   00006F C4                    POP       DE                 ;; 1 cycle
   \   000070 61FA                  CALL      HL                 ;; 3 cycles
   \   000072 EF01                  BR        S:??GlyphSetContrastBoost_10  ;; 3 cycles
   \   000074                       ; ------------------------------------- Block: 17 cycles
    599                          }
    600                      }
    601                  }
    602              }
    603          
    604              return GLYPH_ERROR_ILLEGAL_OPERATION ;
   \                     ??GlyphSetContrastBoost_9:
   \   000074 E1                    ONEB      A                  ;; 1 cycle
   \   000075                       ; ------------------------------------- Block: 1 cycles
   \                     ??GlyphSetContrastBoost_10:
   \   000075 ED....                BR        N:?Subroutine3     ;; 3 cycles
   \   000078                       ; ------------------------------------- Block: 3 cycles
   \   000078                       ; ------------------------------------- Total: 102 cycles
   \   000078                       REQUIRE ?CLRL78_V1_0_L00
    605          }
    606          
    607          /******************************************************************************
    608          * ID : 22.0
    609          * Outline : GlyphSetContrast
    610          * Include : Glyph.h
    611          * Function Name: GlyphSetContrast
    612          * Description : Sets the contrast of the LCD Display.  Any Positive number
    613          * is ok. Check the documentation of your LCD and study the LCD Driver Code
    614          * for correct values.  If the number is too large the contrast will not be
    615          * changed.
    616          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    617          *          : nContrast - A Contrast setting value.
    618          * Return Value : 0=success, not 0= error
    619          * Calling Functions : main
    620          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    621          T_glyphError GlyphSetContrast(T_glyphHandle aHandle, uint8_t nContrast)
   \                     GlyphSetContrast:
    622          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    623              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    624          
    625              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CONTRAST, (uint16_t)nContrast) ;
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 74                    MOV       E, A               ;; 1 cycle
   \   000005 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000007 C5                    PUSH      DE                 ;; 1 cycle
   \   000008 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000009 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000A 321400                MOVW      BC, #0x14          ;; 1 cycle
   \   00000D ED....                BR        N:??Subroutine6_0  ;; 3 cycles
   \   000010                       ; ------------------------------------- Block: 13 cycles
   \   000010                       ; ------------------------------------- Total: 13 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    626          }
    627          
    628          /******************************************************************************
    629          * ID : 23.0
    630          * Outline : GlyphSetContrastBoost
    631          * Include : Glyph.h
    632          * Function Name: GlyphSetContrastBoost
    633          * Description : Sets the boost for the contrast of the LCD Display.  Any
    634          * Positive number is ok.  Check the documentation of your LCD and study the
    635          * LCD Driver Code for correct values.  If the number is too large the contrast
    636          * boost will not be changed.
    637          * Argument : aHandle - the Glyph handle setup by the LCD and Communications.
    638          *          : cContrastBoost - A Contrast Booster setting value.
    639          * Return Value : 0=success, not 0= error
    640          * Calling Functions : main
    641          ******************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    642          T_glyphError GlyphSetContrastBoost(T_glyphHandle aHandle, uint8_t cContrastBoost)
   \                     GlyphSetContrastBoost:
    643          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 16                    MOVW      HL, AX             ;; 1 cycle
    644              T_glyphWorkspace *p_glyph = (T_glyphWorkspace *)aHandle;
    645          
    646              return p_glyph->iLCDAPI->iWrite(aHandle, GLYPH_CONTRAST_BOOST, (uint16_t)cContrastBoost) ;
   \   000002 63                    MOV       A, B               ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 74                    MOV       E, A               ;; 1 cycle
   \   000005 5500                  MOV       D, #0x0            ;; 1 cycle
   \   000007 C5                    PUSH      DE                 ;; 1 cycle
   \   000008 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000009 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000A 321500                MOVW      BC, #0x15          ;; 1 cycle
   \   00000D ED....                BR        N:??Subroutine6_0  ;; 3 cycles
   \   000010                       ; ------------------------------------- Block: 13 cycles
   \   000010                       ; ------------------------------------- Total: 13 cycles
   \   000010                       REQUIRE ?CLRL78_V1_0_L00
    647          }

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "API v. %d.0%d">`:
   \   000000 41504920762E          DB "API v. %d.0%d"

   \                                 In  segment NEAR_CONST, align 2
   \                     `?<Constant "Impl. v. %d.%d%d">`:
   \   000000 496D706C2E20          DB "Impl. v. %d.%d%d"
   \   000011 00                    DB 0

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   GlyphChar
        2   -- Indirect call
      6   GlyphClearScreen
        4   -- Indirect call
     10   GlyphClose
        8   -- Indirect call
        8   -> __near_free
     10   GlyphDrawBlock
        4   -- Indirect call
      6   GlyphDrawTestPattern
        4   -- Indirect call
     10   GlyphEraseBlock
        4   -- Indirect call
      4   GlyphGetFont
        2   -- Indirect call
      4   GlyphGetStatus
        2   -- Indirect call
     18   GlyphGetVersionInfo
        8   -- Indirect call
       12   -> sprintf
       18   -> sprintf
      6   GlyphGetXY
        4   -- Indirect call
      6   GlyphInvertScreen
        4   -- Indirect call
      6   GlyphNormalScreen
        4   -- Indirect call
     10   GlyphOpen
        8   -- Indirect call
        8   -> GlyphCommOpen
        8   -> GlyphLCDOpen
        8   -> __near_malloc
      2   GlyphRead
        0   -- Indirect call
      6   GlyphSetContrast
        4   -- Indirect call
      6   GlyphSetContrastBoost
        4   -- Indirect call
      6   GlyphSetDrawMode
        4   -- Indirect call
      6   GlyphSetFont
        4   -- Indirect call
      4   GlyphSetX
        2   -- Indirect call
      6   GlyphSetXY
        4   -- Indirect call
      4   GlyphSetY
        2   -- Indirect call
      6   GlyphSleep
        4   -- Indirect call
     10   GlyphString
        8   -- Indirect call
      6   GlyphWake
        4   -- Indirect call
      2   GlyphWrite
        0   -- Indirect call


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "API v. %d.0%d">
      18  ?<Constant "Impl. v. %d.%d%d">
       9  ??Subroutine5_0
       6  ??Subroutine6_0
       6  ??Subroutine7_0
       6  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine2
       7  ?Subroutine3
       5  ?Subroutine4
      13  GlyphChar
       8  GlyphClearScreen
      91  GlyphClose
     117  GlyphDrawBlock
       6  GlyphDrawTestPattern
     120  GlyphEraseBlock
      13  GlyphGetFont
      11  GlyphGetStatus
     246  GlyphGetVersionInfo
      45  GlyphGetXY
       9  GlyphInvertScreen
       9  GlyphNormalScreen
      97  GlyphOpen
      12  GlyphRead
      16  GlyphSetContrast
      16  GlyphSetContrastBoost
      10  GlyphSetDrawMode
      16  GlyphSetFont
       8  GlyphSetX
      45  GlyphSetXY
      13  GlyphSetY
       9  GlyphSleep
      63  GlyphString
      20  GlyphWake
       9  GlyphWrite

 
 1 068 bytes in segment CODE
    32 bytes in segment NEAR_CONST
 
 1 068 bytes of CODE  memory
    32 bytes of CONST memory

Errors: none
Warnings: none
