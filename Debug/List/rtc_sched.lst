###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.5.50715 for RL78             17/Apr/2014  11:25:54 #
# Copyright 2011-2013 IAR Systems AB.                                         #
# Network license: ece-lic-19.ece.ncsu.edu (STD)                              #
#                                                                             #
#    Core         =  rl78_2                                                   #
#    Code model   =  Near                                                     #
#    Data model   =  Near                                                     #
#                 =                                                           #
#    Source file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\RTC\rtc_sched.c         #
#    Command line =  "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\RTC\rtc_sched.c"        #
#                    --core rl78_2 --code_model near --data_model near        #
#                    --near_const_location rom0 -o "D:\NCSU\Courses\ECE 561   #
#                    Embedded System Design\Project                           #
#                    3\Project3\Project3\Project3Code\Debug\Obj\"             #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\rl78\LIB\dlrl78nn2n.h"    #
#                    -e -Ohs --no_crosscall --debug -lCN                      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code\Debug\List\" -I         #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/applilet3_src/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/\" -I             #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/Glyph/Drivers/\" -I     #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/user_include/\" -I      #
#                    "D:\NCSU\Courses\ECE 561 Embedded System Design\Project  #
#                    3\Project3\Project3\Project3Code/RTC/\"                  #
#                    --no_size_constraints                                    #
#    List file    =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\List\rtc_sched.ls #
#                    t                                                        #
#    Object file  =  D:\NCSU\Courses\ECE 561 Embedded System Design\Project   #
#                    3\Project3\Project3\Project3Code\Debug\Obj\rtc_sched.r87 #
#                                                                             #
#                                                                             #
###############################################################################

D:\NCSU\Courses\ECE 561 Embedded System Design\Project 3\Project3\Project3\Project3Code\RTC\rtc_sched.c
      1          #include "r_cg_macrodriver.h"

   \                                 In  segment SADDR_A, at 0xfff04
   \   union <unnamed> volatile __saddr _A_P4
   \                     _A_P4:
   \   000000                       DS 1

   \                                 In  segment NEAR_A, at 0xfff24
   \   union <unnamed> volatile __sfr _A_PM4
   \                     _A_PM4:
   \   000000                       DS 1
      2          #include "r_cg_userdefine.h"
      3          
      4          #include "rtc_sched.h"
      5          
      6          typedef struct {
      7            int period;
      8            int delay;
      9            int ready;
     10            int enabled;
     11            void (* task)(void);
     12          } task_t;
     13          
     14          typedef unsigned char byte;
     15          
     16          
     17          /* =================== Global variables ======================= */

   \                                 In  segment NEAR_Z, align 2, align-sorted
     18          task_t GBL_task_list[MAX_TASKS];
   \                     GBL_task_list:
   \   000000                       DS 100
   \   000064                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     19          int    GBL_run_scheduler=0;
   \                     GBL_run_scheduler:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     20          unsigned num_ticks=0;
   \                     num_ticks:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     21          unsigned ticks_into_sec=0;
   \                     ticks_into_sec:
   \   000000                       DS 2
   \   000002                       REQUIRE __INIT_NEAR_Z
     22          
     23          
     24          /* ==================== Function prototypes ==================== */
     25          void tick_timer_intr(void);
     26          
     27          /*****************************************************************************
     28          Name:            void Init_RTC_Scheduler(void)
     29          Parameters:
     30          Returns:
     31          Description:     Intializes board support firmware for scheduler.
     32          
     33          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     34          void Init_RTC_Scheduler(void)
   \                     Init_RTC_Scheduler:
     35          {
     36            num_ticks = 0;
   \   000000 F6                    CLRW      AX                 ;; 1 cycle
   \   000001 C5                    PUSH      DE                 ;; 1 cycle
   \   000002 BF....                MOVW      N:num_ticks, AX    ;; 1 cycle
     37            Init_Task_Timers();
   \   000005 36....                MOVW      HL, #GBL_task_list  ;; 1 cycle
   \   000008 5105                  MOV       A, #0x5            ;; 1 cycle
   \   00000A                       ; * Stack frame (at entry) *
   \   00000A                       ; Param size: 0
   \   00000A                       ; Auto size: 0
   \   00000A                       ; ------------------------------------- Block: 5 cycles
   \                     ??Init_RTC_Scheduler_0:
   \   00000A 340000                MOVW      DE, #0x0           ;; 1 cycle
   \   00000D 35                    XCHW      AX, DE             ;; 1 cycle
   \   00000E BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00000F BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
   \   000011 BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
   \   000013 BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
   \   000015 BC08                  MOVW      [HL+0x08], AX      ;; 1 cycle
   \   000017 BC0A                  MOVW      [HL+0x0A], AX      ;; 1 cycle
   \   000019 BC0E                  MOVW      [HL+0x0E], AX      ;; 1 cycle
   \   00001B BC0C                  MOVW      [HL+0x0C], AX      ;; 1 cycle
   \   00001D BC10                  MOVW      [HL+0x10], AX      ;; 1 cycle
   \   00001F BC12                  MOVW      [HL+0x12], AX      ;; 1 cycle
   \   000021 15                    MOVW      AX, DE             ;; 1 cycle
   \   000022 37                    XCHW      AX, HL             ;; 1 cycle
   \   000023 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000026 37                    XCHW      AX, HL             ;; 1 cycle
   \   000027 91                    DEC       A                  ;; 1 cycle
   \   000028 DFE0                  BNZ       ??Init_RTC_Scheduler_0  ;; 4 cycles
   \   00002A                       ; ------------------------------------- Block: 21 cycles
     38          #if RTC_MONITOR_STANDBY
     39          	RTC_STANDBY_OUTPUT_MODE = DIR_OUT; // Set port bit to output
     40          	RTC_STANDBY_OUTPUT = 1; // Not currently sleeping
     41          #endif
     42          
     43          #if RTC_MONITOR_ACTIVITY
     44          	RTC_ACTIVE_OUTPUT_MODE = DIR_OUT; // set port bit to output
   \   00002A 711B24                CLR1      0xFFF24.1          ;; 2 cycles
     45          	RTC_ACTIVE_OUTPUT = 1; // No task is currently active
   \   00002D 711204                SET1      S:0xFFF04.1        ;; 2 cycles
     46          #endif
     47          }
   \   000030 C4                    POP       DE                 ;; 1 cycle
   \   000031 D7                    RET                          ;; 6 cycles
   \   000032                       ; ------------------------------------- Block: 11 cycles
   \   000032                       ; ------------------------------------- Total: 37 cycles
   \   000032                       REQUIRE ?CLRL78_V1_0_L00
   \   000032                       REQUIRE _A_PM4
   \   000032                       REQUIRE _A_P4
     48          
     49          /*****************************************************************************
     50          Name:           tick_timer_intr
     51          Parameters:     none
     52          Returns:        none
     53          Description:    ISR for periodic timer tick.  Decrements the timer value for all
     54          valid and enabled tasks. If timer value reaches 0, set run flag and reset timer
     55          value to initial value to allow periodic execution.
     56          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     57          void tick_timer_intr(void)
   \                     tick_timer_intr:
     58          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
     59            static char i;
     60          
     61            num_ticks++;
   \   000001 A2....                INCW      N:num_ticks        ;; 2 cycles
     62            for (i=0 ; i<MAX_TASKS ; i++) {		 /* If this is a scheduled task */
   \   000004 F5....                CLRB      N:??i              ;; 1 cycle
   \   000007 34....                MOVW      DE, #GBL_task_list  ;; 1 cycle
   \   00000A                       ; * Stack frame (at entry) *
   \   00000A                       ; Param size: 0
   \   00000A                       ; Auto size: 0
   \   00000A                       ; ------------------------------------- Block: 5 cycles
     63              if (GBL_task_list[i].task != NULL) {
   \                     ??tick_timer_intr_0:
   \   00000A AA08                  MOVW      AX, [DE+0x08]      ;; 1 cycle
   \   00000C 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00000F DD1D                  BZ        ??Disable_Task_0   ;; 4 cycles
   \   000011                       ; ------------------------------------- Block: 6 cycles
     64               if (GBL_task_list[i].enabled == 1) {
   \   000011 AA06                  MOVW      AX, [DE+0x06]      ;; 1 cycle
   \   000013 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   000016 DF16                  BNZ       ??Disable_Task_0   ;; 4 cycles
   \   000018                       ; ------------------------------------- Block: 6 cycles
     65                 if (GBL_task_list[i].delay) {
   \   000018 C5                    PUSH      DE                 ;; 1 cycle
   \   000019 C6                    POP       HL                 ;; 1 cycle
   \   00001A A7                    INCW      HL                 ;; 1 cycle
   \   00001B A7                    INCW      HL                 ;; 1 cycle
   \   00001C AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   00001D 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000020 DD0C                  BZ        ??Disable_Task_0   ;; 4 cycles
   \   000022                       ; ------------------------------------- Block: 10 cycles
     66                   if (--GBL_task_list[i].delay == 0){
   \   000022 B1                    DECW      AX                 ;; 1 cycle
   \   000023 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000026 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000027 DF05                  BNZ       ??Disable_Task_0   ;; 4 cycles
   \   000029                       ; ------------------------------------- Block: 7 cycles
     67                     GBL_task_list[i].ready = 1;
   \   000029 E6                    ONEW      AX                 ;; 1 cycle
   \   00002A BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
     68                     GBL_task_list[i].delay = GBL_task_list[i].period;
   \   00002C A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   00002D BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00002E                       ; ------------------------------------- Block: 4 cycles
   \                     ??Disable_Task_0:
   \   00002E A0....                INC       N:??i              ;; 2 cycles
   \   000031 AA12                  MOVW      AX, [DE+0x12]      ;; 1 cycle
   \   000033 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000036 DD1F                  BZ        ??Disable_Task_1   ;; 4 cycles
   \   000038                       ; ------------------------------------- Block: 8 cycles
   \   000038 AA10                  MOVW      AX, [DE+0x10]      ;; 1 cycle
   \   00003A 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   00003D DF18                  BNZ       ??Disable_Task_1   ;; 4 cycles
   \   00003F                       ; ------------------------------------- Block: 6 cycles
   \   00003F 15                    MOVW      AX, DE             ;; 1 cycle
   \   000040 040C00                ADDW      AX, #0xC           ;; 1 cycle
   \   000043 16                    MOVW      HL, AX             ;; 1 cycle
   \   000044 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000045 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000048 DD0D                  BZ        ??Disable_Task_1   ;; 4 cycles
   \   00004A                       ; ------------------------------------- Block: 9 cycles
   \   00004A B1                    DECW      AX                 ;; 1 cycle
   \   00004B 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00004E BB                    MOVW      [HL], AX           ;; 1 cycle
   \   00004F DF06                  BNZ       ??Disable_Task_1   ;; 4 cycles
   \   000051                       ; ------------------------------------- Block: 7 cycles
   \   000051 E6                    ONEW      AX                 ;; 1 cycle
   \   000052 BA0E                  MOVW      [DE+0x0E], AX      ;; 1 cycle
   \   000054 AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   000056 BB                    MOVW      [HL], AX           ;; 1 cycle
   \   000057                       ; ------------------------------------- Block: 4 cycles
     69                    }
     70                  }
     71                }
     72              }
     73            }
   \                     ??Disable_Task_1:
   \   000057 A0....                INC       N:??i              ;; 2 cycles
   \   00005A 15                    MOVW      AX, DE             ;; 1 cycle
   \   00005B 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   00005E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00005F 8F....                MOV       A, N:??i           ;; 1 cycle
   \   000062 4C0A                  CMP       A, #0xA            ;; 1 cycle
   \   000064 DCA4                  BC        ??tick_timer_intr_0  ;; 4 cycles
   \   000066                       ; ------------------------------------- Block: 11 cycles
     74          }
   \   000066 C4                    POP       DE                 ;; 1 cycle
   \   000067 D7                    RET                          ;; 6 cycles
   \   000068                       ; ------------------------------------- Block: 7 cycles
   \   000068                       ; ------------------------------------- Total: 90 cycles
   \   000068                       REQUIRE ?CLRL78_V1_0_L00

   \                                 In  segment NEAR_Z, align 1, align-sorted
   \                     ??i:
   \   000000                       DS 1
   \   000001                       REQUIRE __INIT_NEAR_Z
     75          
     76          /*****************************************************************************
     77          Name:   	Add_Task
     78          Parameters:     void (*task)(void),
     79                          int period (milliseconds),
     80                          int priority
     81          
     82          Returns:        1 executed ok, 0 unable to load task.  priority already assigned.
     83          Description:    Adds task to Round Robin Scheduler.
     84          
     85          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
     86          int	Add_Task(void (*task)(void), int period, int priority)
   \                     Add_Task:
     87          {
   \   000000 C1                    PUSH      AX                 ;; 1 cycle
   \   000001 15                    MOVW      AX, DE             ;; 1 cycle
     88            	/* Check for valid priority */
     89            	if (priority >= MAX_TASKS || priority < 0)
   \   000002 440A00                CMPW      AX, #0xA           ;; 1 cycle
   \   000005 C3                    PUSH      BC                 ;; 1 cycle
   \   000006 DE14                  BNC       ??Disable_Task_2   ;; 4 cycles
   \   000008                       ; ------------------------------------- Block: 8 cycles
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 4
     90              	return 0;
     91            	/* Check to see if we are overwriting an already scheduled task */
     92            	if (GBL_task_list[priority].task != NULL)
   \   000008 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   00000B CEFB01                MULHU                        ;; 2 cycles
   \   00000E 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   000011 14                    MOVW      DE, AX             ;; 1 cycle
   \   000012 040800                ADDW      AX, #0x8           ;; 1 cycle
   \   000015 16                    MOVW      HL, AX             ;; 1 cycle
   \   000016 AB                    MOVW      AX, [HL]           ;; 1 cycle
   \   000017 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00001A DD03                  BZ        ??Disable_Task_3   ;; 4 cycles
   \   00001C                       ; ------------------------------------- Block: 13 cycles
     93              	return 0;
   \                     ??Disable_Task_2:
   \   00001C F6                    CLRW      AX                 ;; 1 cycle
   \   00001D EF11                  BR        S:??Disable_Task_4  ;; 3 cycles
   \   00001F                       ; ------------------------------------- Block: 4 cycles
     94            	/* Schedule the task */
     95            	GBL_task_list[priority].task = task;
   \                     ??Disable_Task_3:
   \   00001F A802                  MOVW      AX, [SP+0x02]      ;; 1 cycle
   \   000021 BB                    MOVW      [HL], AX           ;; 1 cycle
     96            	GBL_task_list[priority].ready  = 0;
   \   000022 F6                    CLRW      AX                 ;; 1 cycle
   \   000023 BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
     97          	GBL_task_list[priority].delay = period;
   \   000025 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000027 BA02                  MOVW      [DE+0x02], AX      ;; 1 cycle
     98          	GBL_task_list[priority].enabled = 1;
   \   000029 E6                    ONEW      AX                 ;; 1 cycle
   \   00002A BA06                  MOVW      [DE+0x06], AX      ;; 1 cycle
     99            	GBL_task_list[priority].period = period;
   \   00002C A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   00002E B9                    MOVW      [DE], AX           ;; 1 cycle
    100              return 1;
   \   00002F E6                    ONEW      AX                 ;; 1 cycle
   \   000030                       ; ------------------------------------- Block: 11 cycles
   \                     ??Disable_Task_4:
   \   000030 1004                  ADDW      SP, #0x4           ;; 1 cycle
   \   000032 D7                    RET                          ;; 6 cycles
   \   000033                       ; ------------------------------------- Block: 7 cycles
   \   000033                       ; ------------------------------------- Total: 43 cycles
   \   000033                       REQUIRE ?CLRL78_V1_0_L00
    101          }
    102          /*****************************************************************************
    103          Name:        Remove_Task
    104          Parameters:  void (* task)(void)  "task name"
    105          Returns:     none
    106          Description: Removes task from Round Robin Scheduler.
    107          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    108          void Remove_Task(void (* task)(void))
   \                     Remove_Task:
    109          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 12                    MOVW      BC, AX             ;; 1 cycle
    110            int i;
    111          
    112            for (i=0 ; i<MAX_TASKS ; i++) {
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 34....                MOVW      DE, #GBL_task_list+8  ;; 1 cycle
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 0
   \   000008                       ; ------------------------------------- Block: 6 cycles
    113              if (GBL_task_list[i].task == task) {
   \                     ??Remove_Task_0:
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 43                    CMPW      AX, BC             ;; 1 cycle
   \   00000A DF17                  BNZ       ??Disable_Task_5   ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 6 cycles
    114                GBL_task_list[i].task = NULL;
   \                     ??Remove_Task_1:
   \   00000C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000D 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000010 CEFB01                MULHU                        ;; 2 cycles
   \   000013 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   000016 16                    MOVW      HL, AX             ;; 1 cycle
   \   000017 F6                    CLRW      AX                 ;; 1 cycle
   \   000018 BC08                  MOVW      [HL+0x08], AX      ;; 1 cycle
    115                GBL_task_list[i].delay = 0;
   \   00001A BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    116                GBL_task_list[i].period = 0;
   \   00001C BB                    MOVW      [HL], AX           ;; 1 cycle
    117                GBL_task_list[i].enabled = 0;
   \   00001D BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
    118                GBL_task_list[i].ready = 0;
   \   00001F BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
    119                return;
   \   000021 EF14                  BR        S:??Disable_Task_6  ;; 3 cycles
   \   000023                       ; ------------------------------------- Block: 15 cycles
    120              } }
   \                     ??Disable_Task_5:
   \   000023 AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   000025 43                    CMPW      AX, BC             ;; 1 cycle
   \   000026 A7                    INCW      HL                 ;; 1 cycle
   \   000027 DDE3                  BZ        ??Remove_Task_1    ;; 4 cycles
   \   000029                       ; ------------------------------------- Block: 7 cycles
   \   000029 15                    MOVW      AX, DE             ;; 1 cycle
   \   00002A A7                    INCW      HL                 ;; 1 cycle
   \   00002B 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   00002E 14                    MOVW      DE, AX             ;; 1 cycle
   \   00002F 17                    MOVW      AX, HL             ;; 1 cycle
   \   000030 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   000032 440A80                CMPW      AX, #0x800A        ;; 1 cycle
   \   000035 DCD1                  BC        ??Remove_Task_0    ;; 4 cycles
   \   000037                       ; ------------------------------------- Block: 11 cycles
    121          }
   \                     ??Disable_Task_6:
   \   000037 C4                    POP       DE                 ;; 1 cycle
   \   000038 C2                    POP       BC                 ;; 1 cycle
   \   000039 D7                    RET                          ;; 6 cycles
   \   00003A                       ; ------------------------------------- Block: 8 cycles
   \   00003A                       ; ------------------------------------- Total: 53 cycles
   \   00003A                       REQUIRE ?CLRL78_V1_0_L00
    122          /*****************************************************************************
    123          Name:      Init_Task_Timers
    124          Parameters: none
    125          Returns:    none
    126          Description: Initializes task information structure to null and zeroes.
    127          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    128          void Init_Task_Timers(void)
   \                     Init_Task_Timers:
    129          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
    130            int i;
    131            /* Initialize all tasks */
    132            for (i=0 ; i<MAX_TASKS ; i++) {
   \   000001 36....                MOVW      HL, #GBL_task_list  ;; 1 cycle
   \   000004 5105                  MOV       A, #0x5            ;; 1 cycle
   \   000006                       ; * Stack frame (at entry) *
   \   000006                       ; Param size: 0
   \   000006                       ; Auto size: 0
   \   000006                       ; ------------------------------------- Block: 3 cycles
    133              GBL_task_list[i].period = 0;
   \                     ??Init_Task_Timers_0:
   \   000006 340000                MOVW      DE, #0x0           ;; 1 cycle
   \   000009 35                    XCHW      AX, DE             ;; 1 cycle
   \   00000A BB                    MOVW      [HL], AX           ;; 1 cycle
    134              GBL_task_list[i].ready = 0;
   \   00000B BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
    135              GBL_task_list[i].delay = 0;
   \   00000D BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    136              GBL_task_list[i].enabled = 0;
   \   00000F BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
    137              GBL_task_list[i].task = NULL;
   \   000011 BC08                  MOVW      [HL+0x08], AX      ;; 1 cycle
   \   000013 BC0A                  MOVW      [HL+0x0A], AX      ;; 1 cycle
   \   000015 BC0E                  MOVW      [HL+0x0E], AX      ;; 1 cycle
   \   000017 BC0C                  MOVW      [HL+0x0C], AX      ;; 1 cycle
   \   000019 BC10                  MOVW      [HL+0x10], AX      ;; 1 cycle
   \   00001B BC12                  MOVW      [HL+0x12], AX      ;; 1 cycle
   \   00001D 15                    MOVW      AX, DE             ;; 1 cycle
    138            }
   \   00001E 37                    XCHW      AX, HL             ;; 1 cycle
   \   00001F 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000022 37                    XCHW      AX, HL             ;; 1 cycle
   \   000023 91                    DEC       A                  ;; 1 cycle
   \   000024 DFE0                  BNZ       ??Init_Task_Timers_0  ;; 4 cycles
   \   000026                       ; ------------------------------------- Block: 21 cycles
    139          }
   \   000026 C4                    POP       DE                 ;; 1 cycle
   \   000027 D7                    RET                          ;; 6 cycles
   \   000028                       ; ------------------------------------- Block: 7 cycles
   \   000028                       ; ------------------------------------- Total: 31 cycles
   \   000028                       REQUIRE ?CLRL78_V1_0_L00
    140          /*****************************************************************************
    141          Name:         Run_RTC_Scheduler
    142          Parameters:   none
    143          Returns:      none
    144          Description:  Starts Round Robin Scheduler.  Should be call in Main program after
    145          completing initialization.  Only enabled tasks will be scheduled and run.
    146          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    147          void Run_RTC_Scheduler(void)
   \                     Run_RTC_Scheduler:
    148          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
    149            int i;
    150            GBL_run_scheduler = 1;
   \   000001 E6                    ONEW      AX                 ;; 1 cycle
   \   000002 C5                    PUSH      DE                 ;; 1 cycle
   \   000003 BF....                MOVW      N:GBL_run_scheduler, AX  ;; 1 cycle
   \   000006 EF1B                  BR        S:??Disable_Task_7  ;; 3 cycles
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 0
   \   000008                       ; ------------------------------------- Block: 7 cycles
    151            /* Loop forever */
    152            while (1) {
    153              /* Check each task */
    154              for (i=0 ; i<MAX_TASKS ; i++) {
    155          
    156                /* If this is a scheduled task */
    157                if (GBL_task_list[i].task != NULL) { /* valid task */
    158          				if (GBL_task_list[i].enabled == 1) { /* enabled */
    159          				  if (GBL_task_list[i].ready == 1) {  /* ready to run */
    160          #if RTC_MONITOR_ACTIVITY
    161          						RTC_ACTIVE_OUTPUT = 0; // Indicate task is active
    162          #endif // RTC_MONITOR_ACTIVITY
    163          
    164          				    /* Run the task */
    165          				    GBL_task_list[i].task();
   \                     ??Run_RTC_Scheduler_0:
   \   000008 17                    MOVW      AX, HL             ;; 1 cycle
   \   000009 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   00000C CEFB01                MULHU                        ;; 2 cycles
   \   00000F 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   000012 711304                CLR1      S:0xFFF04.1        ;; 2 cycles
   \   000015 14                    MOVW      DE, AX             ;; 1 cycle
   \   000016 CEFC00                MOV       CS, #0x0           ;; 1 cycle
   \   000019 AA08                  MOVW      AX, [DE+0x08]      ;; 1 cycle
   \   00001B 61CA                  CALL      AX                 ;; 3 cycles
    166          
    167          #if RTC_MONITOR_ACTIVITY
    168          						RTC_ACTIVE_OUTPUT = 1; // Indicate task is inactive
    169          #endif // RTC_MONITOR_ACTIVITY
    170          
    171          				    /* Reset the task ready flag */
    172          				    GBL_task_list[i].ready = 0;
   \   00001D F6                    CLRW      AX                 ;; 1 cycle
   \   00001E 711204                SET1      S:0xFFF04.1        ;; 2 cycles
   \   000021 BA04                  MOVW      [DE+0x04], AX      ;; 1 cycle
    173          				    break;
   \   000023                       ; ------------------------------------- Block: 17 cycles
    174          	  			}
   \                     ??Disable_Task_7:
   \   000023 F6                    CLRW      AX                 ;; 1 cycle
   \   000024 16                    MOVW      HL, AX             ;; 1 cycle
   \   000025 34....                MOVW      DE, #GBL_task_list+4  ;; 1 cycle
   \   000028                       ; ------------------------------------- Block: 3 cycles
   \                     ??Run_RTC_Scheduler_1:
   \   000028 AA04                  MOVW      AX, [DE+0x04]      ;; 1 cycle
   \   00002A 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   00002D DD0D                  BZ        ??Disable_Task_8   ;; 4 cycles
   \   00002F                       ; ------------------------------------- Block: 6 cycles
   \   00002F AA02                  MOVW      AX, [DE+0x02]      ;; 1 cycle
   \   000031 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   000034 DF06                  BNZ       ??Disable_Task_8   ;; 4 cycles
   \   000036                       ; ------------------------------------- Block: 6 cycles
   \   000036 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000037 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   00003A DDCC                  BZ        ??Run_RTC_Scheduler_0  ;; 4 cycles
   \   00003C                       ; ------------------------------------- Block: 6 cycles
   \                     ??Disable_Task_8:
   \   00003C AA0E                  MOVW      AX, [DE+0x0E]      ;; 1 cycle
   \   00003E 440000                CMPW      AX, #0x0           ;; 1 cycle
   \   000041 A7                    INCW      HL                 ;; 1 cycle
   \   000042 DD0E                  BZ        ??Disable_Task_9   ;; 4 cycles
   \   000044                       ; ------------------------------------- Block: 7 cycles
   \   000044 AA0C                  MOVW      AX, [DE+0x0C]      ;; 1 cycle
   \   000046 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   000049 DF07                  BNZ       ??Disable_Task_9   ;; 4 cycles
   \   00004B                       ; ------------------------------------- Block: 6 cycles
   \   00004B AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   00004D 440100                CMPW      AX, #0x1           ;; 1 cycle
   \   000050 DDB6                  BZ        ??Run_RTC_Scheduler_0  ;; 4 cycles
   \   000052                       ; ------------------------------------- Block: 6 cycles
    175                  }
    176                }
    177              }
   \                     ??Disable_Task_9:
   \   000052 15                    MOVW      AX, DE             ;; 1 cycle
   \   000053 A7                    INCW      HL                 ;; 1 cycle
   \   000054 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000057 14                    MOVW      DE, AX             ;; 1 cycle
   \   000058 17                    MOVW      AX, HL             ;; 1 cycle
   \   000059 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   00005B 440A80                CMPW      AX, #0x800A        ;; 1 cycle
   \   00005E DEC3                  BNC       ??Disable_Task_7   ;; 4 cycles
   \   000060                       ; ------------------------------------- Block: 11 cycles
   \   000060 EFC6                  BR        S:??Run_RTC_Scheduler_1  ;; 3 cycles
   \   000062                       ; ------------------------------------- Block: 3 cycles
   \   000062                       ; ------------------------------------- Total: 78 cycles
   \   000062                       REQUIRE ?CLRL78_V1_0_L00
   \   000062                       REQUIRE _A_P4
    178          		// reached end of loop, so start at top again
    179          #if RTC_HALT_WHEN_IDLE
    180          		RTC_STANDBY_OUTPUT = 0; // Sleeping
    181          		__halt();
    182          		RTC_STANDBY_OUTPUT = 1; // Not sleeping
    183          #endif // RTC_HALT_WHEN_IDLE
    184          
    185          #if RTC_STOP_WHEN_IDLE
    186          		RTC_STANDBY_OUTPUT = 0; // Sleeping
    187          		__stop();
    188          		RTC_STANDBY_OUTPUT = 1; // Not sleeping
    189          #endif // RTC_STOP_WHEN_IDLE
    190          
    191            }
    192          }
    193          
    194          /*****************************************************************************
    195          Name:         Run_Task
    196          Parameters:   task_number
    197          Returns:      none
    198          Description:  Set the run flag for the specified task. This will tell the
    199           scheduler it is ready to run without further delay.
    200          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    201          void Run_TaskN(int task_number)
   \                     Run_TaskN:
    202          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
    203            GBL_task_list[task_number].ready = 1;
   \   000001 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000004 CEFB01                MULHU                        ;; 2 cycles
   \   000007 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   00000A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000B E6                    ONEW      AX                 ;; 1 cycle
   \   00000C BC04                  MOVW      [HL+0x04], AX      ;; 1 cycle
    204            GBL_task_list[task_number].enabled = 1;
   \   00000E BC06                  MOVW      [HL+0x06], AX      ;; 1 cycle
    205          }
   \   000010 C2                    POP       BC                 ;; 1 cycle
   \   000011 D7                    RET                          ;; 6 cycles
   \   000012                       ; ------------------------------------- Block: 16 cycles
   \   000012                       ; ------------------------------------- Total: 16 cycles
   \   000012                       ; * Stack frame (at entry) *
   \   000012                       ; Param size: 0
   \   000012                       ; Auto size: 0
   \   000012                       REQUIRE ?CLRL78_V1_0_L00
    206          
    207          /*****************************************************************************
    208          Name:         Reschedule_TaskN
    209          Parameters:   task number, new_timer_val
    210          Returns:      none
    211          Description:  Modifies the period at which a task will run.
    212          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    213          void Reschedule_TaskN(int n, int new_timer_val)
   \                     Reschedule_TaskN:
    214          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
    215          	GBL_task_list[n].period = new_timer_val;
   \   000002 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000005 CEFB01                MULHU                        ;; 2 cycles
   \   000008 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   00000B C6                    POP       HL                 ;; 1 cycle
   \   00000C 14                    MOVW      DE, AX             ;; 1 cycle
   \   00000D 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000E B9                    MOVW      [DE], AX           ;; 1 cycle
    216            GBL_task_list[n].delay = new_timer_val;
   \   00000F BA02                  MOVW      [DE+0x02], AX      ;; 1 cycle
    217          }
   \   000011 C4                    POP       DE                 ;; 1 cycle
   \   000012 D7                    RET                          ;; 6 cycles
   \   000013                       ; ------------------------------------- Block: 18 cycles
   \   000013                       ; ------------------------------------- Total: 18 cycles
   \   000013                       ; * Stack frame (at entry) *
   \   000013                       ; Param size: 0
   \   000013                       ; Auto size: 0
   \   000013                       REQUIRE ?CLRL78_V1_0_L00
    218          
    219          /*****************************************************************************
    220          Name:         Enable_TaskN
    221          Parameters:   task_number
    222          Returns:      none
    223          Description:  Set the "enabled" flag for the task, allowing it to be scheduled.
    224          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    225          void Enable_TaskN(int n)
   \                     Enable_TaskN:
    226          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
    227            GBL_task_list[n].enabled = 1;
   \   000001 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000004 CEFB01                MULHU                        ;; 2 cycles
   \   000007 04....                ADDW      AX, #GBL_task_list+6  ;; 1 cycle
   \   00000A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000B E6                    ONEW      AX                 ;; 1 cycle
   \   00000C BB                    MOVW      [HL], AX           ;; 1 cycle
    228          }
   \   00000D C2                    POP       BC                 ;; 1 cycle
   \   00000E D7                    RET                          ;; 6 cycles
   \   00000F                       ; ------------------------------------- Block: 15 cycles
   \   00000F                       ; ------------------------------------- Total: 15 cycles
   \   00000F                       ; * Stack frame (at entry) *
   \   00000F                       ; Param size: 0
   \   00000F                       ; Auto size: 0
   \   00000F                       REQUIRE ?CLRL78_V1_0_L00
    229          
    230          /*****************************************************************************
    231          Name:         Disable_TaskN
    232          Parameters:   task_number
    233          Returns:      none
    234          Description:  Clear the "enabled" flag for the task, keeping it from being
    235          scheduled.
    236          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    237          void Disable_TaskN(int n)
   \                     Disable_TaskN:
    238          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
    239            GBL_task_list[n].enabled = 0;
   \   000001 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000004 CEFB01                MULHU                        ;; 2 cycles
   \   000007 04....                ADDW      AX, #GBL_task_list+6  ;; 1 cycle
   \   00000A 16                    MOVW      HL, AX             ;; 1 cycle
   \   00000B F6                    CLRW      AX                 ;; 1 cycle
   \   00000C BB                    MOVW      [HL], AX           ;; 1 cycle
    240          }
   \   00000D C2                    POP       BC                 ;; 1 cycle
   \   00000E D7                    RET                          ;; 6 cycles
   \   00000F                       ; ------------------------------------- Block: 15 cycles
   \   00000F                       ; ------------------------------------- Total: 15 cycles
   \   00000F                       ; * Stack frame (at entry) *
   \   00000F                       ; Param size: 0
   \   00000F                       ; Auto size: 0
   \   00000F                       REQUIRE ?CLRL78_V1_0_L00
    241          
    242          /*****************************************************************************
    243          Name:         Reschedule_Task
    244          Parameters:   task pointer, new_timer_val
    245          Returns:      none
    246          Description:  Modifies the period at which a task will run.
    247          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    248          void Reschedule_Task(void (*task)(void), int new_timer_val)
   \                     Reschedule_Task:
    249          {
   \   000000 C5                    PUSH      DE                 ;; 1 cycle
   \   000001 C3                    PUSH      BC                 ;; 1 cycle
   \   000002 12                    MOVW      BC, AX             ;; 1 cycle
    250            int i;
    251            for (i=0; i<MAX_TASKS; i++) {
   \   000003 F6                    CLRW      AX                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 34....                MOVW      DE, #GBL_task_list+8  ;; 1 cycle
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 2
   \   000008                       ; ------------------------------------- Block: 6 cycles
    252              if (GBL_task_list[i].task == task) {
   \                     ??Reschedule_Task_0:
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 43                    CMPW      AX, BC             ;; 1 cycle
   \   00000A DF12                  BNZ       ??Disable_Task_10  ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 6 cycles
    253                GBL_task_list[i].period = new_timer_val;
   \                     ??Reschedule_Task_1:
   \   00000C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000D 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000010 CEFB01                MULHU                        ;; 2 cycles
   \   000013 04....                ADDW      AX, #GBL_task_list  ;; 1 cycle
   \   000016 16                    MOVW      HL, AX             ;; 1 cycle
   \   000017 A800                  MOVW      AX, [SP]           ;; 1 cycle
   \   000019 BB                    MOVW      [HL], AX           ;; 1 cycle
    254                GBL_task_list[i].delay = new_timer_val;
   \   00001A BC02                  MOVW      [HL+0x02], AX      ;; 1 cycle
    255                return;
   \   00001C EF14                  BR        S:??Disable_Task_11  ;; 3 cycles
   \   00001E                       ; ------------------------------------- Block: 12 cycles
    256              }
   \                     ??Disable_Task_10:
   \   00001E AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   000020 43                    CMPW      AX, BC             ;; 1 cycle
   \   000021 A7                    INCW      HL                 ;; 1 cycle
   \   000022 DDE8                  BZ        ??Reschedule_Task_1  ;; 4 cycles
   \   000024                       ; ------------------------------------- Block: 7 cycles
    257            }
   \   000024 15                    MOVW      AX, DE             ;; 1 cycle
   \   000025 A7                    INCW      HL                 ;; 1 cycle
   \   000026 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000029 14                    MOVW      DE, AX             ;; 1 cycle
   \   00002A 17                    MOVW      AX, HL             ;; 1 cycle
   \   00002B 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   00002D 440A80                CMPW      AX, #0x800A        ;; 1 cycle
   \   000030 DCD6                  BC        ??Reschedule_Task_0  ;; 4 cycles
   \   000032                       ; ------------------------------------- Block: 11 cycles
    258          }
   \                     ??Disable_Task_11:
   \   000032 1002                  ADDW      SP, #0x2           ;; 1 cycle
   \   000034 C4                    POP       DE                 ;; 1 cycle
   \   000035 D7                    RET                          ;; 6 cycles
   \   000036                       ; ------------------------------------- Block: 8 cycles
   \   000036                       ; ------------------------------------- Total: 50 cycles
   \   000036                       REQUIRE ?CLRL78_V1_0_L00
    259          
    260          /*****************************************************************************
    261          Name:         Enable_Task
    262          Parameters:   task_number
    263          Returns:      none
    264          Description:  Set the "enabled" flag for the task, allowing it to be scheduled.
    265          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    266          void Enable_Task(void (*task)(void))
   \                     Enable_Task:
    267          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 12                    MOVW      BC, AX             ;; 1 cycle
    268            int i;
    269            for (i=0; i<MAX_TASKS; i++)
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 34....                MOVW      DE, #GBL_task_list+8  ;; 1 cycle
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 0
   \   000008                       ; ------------------------------------- Block: 6 cycles
    270              if (GBL_task_list[i].task == task) {
   \                     ??Enable_Task_0:
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 43                    CMPW      AX, BC             ;; 1 cycle
   \   00000A DF0F                  BNZ       ??Disable_Task_12  ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 6 cycles
    271                GBL_task_list[i].enabled = 1;
   \                     ??Enable_Task_1:
   \   00000C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000D 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000010 CEFB01                MULHU                        ;; 2 cycles
   \   000013 04....                ADDW      AX, #GBL_task_list+6  ;; 1 cycle
   \   000016 16                    MOVW      HL, AX             ;; 1 cycle
   \   000017 E6                    ONEW      AX                 ;; 1 cycle
   \   000018 BB                    MOVW      [HL], AX           ;; 1 cycle
    272                return;
   \   000019 EF14                  BR        S:??Disable_Task_13  ;; 3 cycles
   \   00001B                       ; ------------------------------------- Block: 11 cycles
    273              }
   \                     ??Disable_Task_12:
   \   00001B AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   00001D 43                    CMPW      AX, BC             ;; 1 cycle
   \   00001E A7                    INCW      HL                 ;; 1 cycle
   \   00001F DDEB                  BZ        ??Enable_Task_1    ;; 4 cycles
   \   000021                       ; ------------------------------------- Block: 7 cycles
   \   000021 15                    MOVW      AX, DE             ;; 1 cycle
   \   000022 A7                    INCW      HL                 ;; 1 cycle
   \   000023 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000026 14                    MOVW      DE, AX             ;; 1 cycle
   \   000027 17                    MOVW      AX, HL             ;; 1 cycle
   \   000028 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   00002A 440A80                CMPW      AX, #0x800A        ;; 1 cycle
   \   00002D DCD9                  BC        ??Enable_Task_0    ;; 4 cycles
   \   00002F                       ; ------------------------------------- Block: 11 cycles
    274          }
   \                     ??Disable_Task_13:
   \   00002F C4                    POP       DE                 ;; 1 cycle
   \   000030 C2                    POP       BC                 ;; 1 cycle
   \   000031 D7                    RET                          ;; 6 cycles
   \   000032                       ; ------------------------------------- Block: 8 cycles
   \   000032                       ; ------------------------------------- Total: 49 cycles
   \   000032                       REQUIRE ?CLRL78_V1_0_L00
    275          
    276          /*****************************************************************************
    277          Name:         Disable_Task
    278          Parameters:   task_number
    279          Returns:      none
    280          Description:  Clear the "enabled" flag for the task, keeping it from being
    281          scheduled.
    282          *****************************************************************************/

   \                                 In  segment CODE, align 1, keep-with-next
    283          void Disable_Task(void (*task)(void))
   \                     Disable_Task:
    284          {
   \   000000 C3                    PUSH      BC                 ;; 1 cycle
   \   000001 12                    MOVW      BC, AX             ;; 1 cycle
    285            int i;
    286            for (i=0; i<MAX_TASKS; i++)
   \   000002 F6                    CLRW      AX                 ;; 1 cycle
   \   000003 C5                    PUSH      DE                 ;; 1 cycle
   \   000004 16                    MOVW      HL, AX             ;; 1 cycle
   \   000005 34....                MOVW      DE, #GBL_task_list+8  ;; 1 cycle
   \   000008                       ; * Stack frame (at entry) *
   \   000008                       ; Param size: 0
   \   000008                       ; Auto size: 0
   \   000008                       ; ------------------------------------- Block: 6 cycles
    287              if (GBL_task_list[i].task == task) {
   \                     ??Disable_Task_14:
   \   000008 A9                    MOVW      AX, [DE]           ;; 1 cycle
   \   000009 43                    CMPW      AX, BC             ;; 1 cycle
   \   00000A DF0F                  BNZ       ??Disable_Task_15  ;; 4 cycles
   \   00000C                       ; ------------------------------------- Block: 6 cycles
    288                GBL_task_list[i].enabled = 0;
   \                     ??Disable_Task_16:
   \   00000C 17                    MOVW      AX, HL             ;; 1 cycle
   \   00000D 320A00                MOVW      BC, #0xA           ;; 1 cycle
   \   000010 CEFB01                MULHU                        ;; 2 cycles
   \   000013 04....                ADDW      AX, #GBL_task_list+6  ;; 1 cycle
   \   000016 16                    MOVW      HL, AX             ;; 1 cycle
   \   000017 F6                    CLRW      AX                 ;; 1 cycle
   \   000018 BB                    MOVW      [HL], AX           ;; 1 cycle
    289                return;
   \   000019 EF14                  BR        S:??Disable_Task_17  ;; 3 cycles
   \   00001B                       ; ------------------------------------- Block: 11 cycles
    290              }
   \                     ??Disable_Task_15:
   \   00001B AA0A                  MOVW      AX, [DE+0x0A]      ;; 1 cycle
   \   00001D 43                    CMPW      AX, BC             ;; 1 cycle
   \   00001E A7                    INCW      HL                 ;; 1 cycle
   \   00001F DDEB                  BZ        ??Disable_Task_16  ;; 4 cycles
   \   000021                       ; ------------------------------------- Block: 7 cycles
   \   000021 15                    MOVW      AX, DE             ;; 1 cycle
   \   000022 A7                    INCW      HL                 ;; 1 cycle
   \   000023 041400                ADDW      AX, #0x14          ;; 1 cycle
   \   000026 14                    MOVW      DE, AX             ;; 1 cycle
   \   000027 17                    MOVW      AX, HL             ;; 1 cycle
   \   000028 7C80                  XOR       A, #0x80           ;; 1 cycle
   \   00002A 440A80                CMPW      AX, #0x800A        ;; 1 cycle
   \   00002D DCD9                  BC        ??Disable_Task_14  ;; 4 cycles
   \   00002F                       ; ------------------------------------- Block: 11 cycles
    291          }
   \                     ??Disable_Task_17:
   \   00002F C4                    POP       DE                 ;; 1 cycle
   \   000030 C2                    POP       BC                 ;; 1 cycle
   \   000031 D7                    RET                          ;; 6 cycles
   \   000032                       ; ------------------------------------- Block: 8 cycles
   \   000032                       ; ------------------------------------- Total: 49 cycles
   \   000032                       REQUIRE ?CLRL78_V1_0_L00

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Add_Task
      4   Disable_Task
      2   Disable_TaskN
      4   Enable_Task
      2   Enable_TaskN
      2   Init_RTC_Scheduler
      2   Init_Task_Timers
      4   Remove_Task
      4   Reschedule_Task
      2   Reschedule_TaskN
      4   Run_RTC_Scheduler
        4   -- Indirect call
      2   Run_TaskN
      2   tick_timer_intr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      51  Add_Task
      50  Disable_Task
      15  Disable_TaskN
      50  Enable_Task
      15  Enable_TaskN
       2  GBL_run_scheduler
     100  GBL_task_list
      50  Init_RTC_Scheduler
      40  Init_Task_Timers
      58  Remove_Task
      54  Reschedule_Task
      19  Reschedule_TaskN
      98  Run_RTC_Scheduler
      18  Run_TaskN
       1  _A_P4
       1  _A_PM4
       1  i
       2  num_ticks
     104  tick_timer_intr
       2  ticks_into_sec

 
 622 bytes in segment CODE
   1 byte  in segment NEAR_A
 107 bytes in segment NEAR_Z
   1 byte  in segment SADDR_A
 
 622 bytes of CODE memory
 107 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
